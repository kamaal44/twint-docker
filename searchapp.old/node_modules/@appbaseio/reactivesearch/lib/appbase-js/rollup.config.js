'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _rollupPluginNodeResolve = require('rollup-plugin-node-resolve');

var _rollupPluginNodeResolve2 = _interopRequireDefault(_rollupPluginNodeResolve);

var _rollupPluginCommonjs = require('rollup-plugin-commonjs');

var _rollupPluginCommonjs2 = _interopRequireDefault(_rollupPluginCommonjs);

var _rollupPluginTerser = require('rollup-plugin-terser');

var _rollupPluginReplace = require('rollup-plugin-replace');

var _rollupPluginReplace2 = _interopRequireDefault(_rollupPluginReplace);

var _rollupPluginNodeBuiltins = require('rollup-plugin-node-builtins');

var _rollupPluginNodeBuiltins2 = _interopRequireDefault(_rollupPluginNodeBuiltins);

var _rollupPluginBabel = require('rollup-plugin-babel');

var _rollupPluginBabel2 = _interopRequireDefault(_rollupPluginBabel);

var _package = require('./package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var minify = process.env.MINIFY;
var format = process.env.FORMAT;
var es = format === 'es';
var umd = format === 'umd';
var cjs = format === 'cjs';

var output = void 0;

if (es) {
  output = { file: 'dist/appbase-js.es.js', format: 'es' };
} else if (umd) {
  if (minify) {
    output = {
      file: 'dist/appbase-js.umd.min.js',
      format: 'umd'
    };
  } else {
    output = { file: 'dist/appbase-js.umd.js', format: 'umd' };
  }
} else if (cjs) {
  output = { file: 'dist/appbase-js.cjs.js', format: 'cjs' };
} else if (format) {
  throw new Error('invalid format specified: "' + format + '".');
} else {
  throw new Error('no format specified. --environment FORMAT:xxx');
}

exports.default = {
  input: 'src/index.js',
  output: Object.assign({
    name: umd ? 'Appbase' : 'appbase-js'
  }, output),
  external: umd ? Object.keys(_package2.default.peerDependencies || {}) : [].concat(_toConsumableArray(Object.keys(_package2.default.dependencies || {})), _toConsumableArray(Object.keys(_package2.default.peerDependencies || {}))),
  plugins: [umd ? (0, _rollupPluginNodeResolve2.default)({
    jsnext: true,
    main: true,
    preferBuiltins: false,
    browser: true
  }) : {}, umd ? (0, _rollupPluginCommonjs2.default)({ include: 'node_modules/**' }) : {}, (0, _rollupPluginBabel2.default)({
    exclude: 'node_modules/**',
    babelrc: false,
    presets: [['env', { loose: true, modules: false }]],
    plugins: ['external-helpers']
  }), umd ? (0, _rollupPluginNodeBuiltins2.default)() : {}, umd ? (0, _rollupPluginReplace2.default)({
    'process.env.NODE_ENV': JSON.stringify(minify ? 'production' : 'development')
  }) : null, minify ? (0, _rollupPluginTerser.terser)() : null].filter(Boolean)
};