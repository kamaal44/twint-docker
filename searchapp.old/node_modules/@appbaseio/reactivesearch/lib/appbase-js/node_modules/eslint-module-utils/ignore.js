"use strict";

exports.__esModule = true;

var extname = require('path').extname;

var log = require('debug')('eslint-plugin-import:utils:ignore');

// one-shot memoized
var cachedSet = void 0,
    lastSettings = void 0;
function validExtensions(context) {
  if (cachedSet && context.settings === lastSettings) {
    return cachedSet;
  }

  lastSettings = context.settings;
  cachedSet = makeValidExtensionSet(context.settings);
  return cachedSet;
}

function makeValidExtensionSet(settings) {
  // start with explicit JS-parsed extensions
  var exts = new Set(settings['import/extensions'] || ['.js']);

  // all alternate parser extensions are also valid
  if ('import/parsers' in settings) {
    for (var parser in settings['import/parsers']) {
      settings['import/parsers'][parser].forEach(function (ext) {
        return exts.add(ext);
      });
    }
  }

  return exts;
}

exports.default = function ignore(path, context) {
  // check extension whitelist first (cheap)
  if (!hasValidExtension(path, context)) return true;

  if (!('import/ignore' in context.settings)) return false;
  var ignoreStrings = context.settings['import/ignore'];

  for (var i = 0; i < ignoreStrings.length; i++) {
    var regex = new RegExp(ignoreStrings[i]);
    if (regex.test(path)) {
      log('ignoring ' + path + ', matched pattern /' + ignoreStrings[i] + '/');
      return true;
    }
  }

  return false;
};

function hasValidExtension(path, context) {
  return validExtensions(context).has(extname(path));
}
exports.hasValidExtension = hasValidExtension;