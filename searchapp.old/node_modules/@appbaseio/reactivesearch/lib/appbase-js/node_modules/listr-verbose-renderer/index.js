'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var figures = require('figures');
var cliCursor = require('cli-cursor');
var utils = require('./lib/utils');

var renderHelper = function renderHelper(task, event, options) {
	var log = utils.log.bind(undefined, options);

	if (event.type === 'STATE') {
		var message = task.isPending() ? 'started' : task.state;

		log(task.title + ' [' + message + ']');

		if (task.isSkipped() && task.output) {
			log(figures.arrowRight + ' ' + task.output);
		}
	} else if (event.type === 'DATA') {
		log(figures.arrowRight + ' ' + event.data);
	} else if (event.type === 'TITLE') {
		log(task.title + ' [title changed]');
	}
};

var _render = function _render(tasks, options) {
	var _loop = function _loop(task) {
		task.subscribe(function (event) {
			if (event.type === 'SUBTASKS') {
				_render(task.subtasks, options);
				return;
			}

			renderHelper(task, event, options);
		}, function (err) {
			console.log(err);
		});
	};

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = tasks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var task = _step.value;

			_loop(task);
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}
};

var VerboseRenderer = function () {
	function VerboseRenderer(tasks, options) {
		_classCallCheck(this, VerboseRenderer);

		this._tasks = tasks;
		this._options = Object.assign({
			dateFormat: 'HH:mm:ss'
		}, options);
	}

	_createClass(VerboseRenderer, [{
		key: 'render',
		value: function render() {
			cliCursor.hide();
			_render(this._tasks, this._options);
		}
	}, {
		key: 'end',
		value: function end() {
			cliCursor.show();
		}
	}], [{
		key: 'nonTTY',
		get: function get() {
			return true;
		}
	}]);

	return VerboseRenderer;
}();

module.exports = VerboseRenderer;