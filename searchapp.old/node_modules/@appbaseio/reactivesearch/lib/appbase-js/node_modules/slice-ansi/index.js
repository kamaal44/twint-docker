'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var isFullwidthCodePoint = require('is-fullwidth-code-point');
var astralRegex = require('astral-regex');
var ansiStyles = require('ansi-styles');

var ESCAPES = ['\x1B', '\x9B'];

var END_CODE = 39;

var wrapAnsi = function wrapAnsi(code) {
	return ESCAPES[0] + '[' + code + 'm';
};

module.exports = function (str, begin, end) {
	var arr = [].concat(_toConsumableArray(str.normalize()));

	end = typeof end === 'number' ? end : arr.length;

	var insideEscape = false;
	var escapeCode = null;
	var visible = 0;
	var output = '';

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = arr.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var _ref = _step.value;

			var _ref2 = _slicedToArray(_ref, 2);

			var i = _ref2[0];
			var x = _ref2[1];

			var leftEscape = false;

			if (ESCAPES.includes(x)) {
				insideEscape = true;
				var code = /\d[^m]*/.exec(str.slice(i, i + 4));
				escapeCode = code === END_CODE ? null : code;
			} else if (insideEscape && x === 'm') {
				insideEscape = false;
				leftEscape = true;
			}

			if (!insideEscape && !leftEscape) {
				++visible;
			}

			if (!astralRegex({ exact: true }).test(x) && isFullwidthCodePoint(x.codePointAt())) {
				++visible;
			}

			if (visible > begin && visible <= end) {
				output += x;
			} else if (visible === begin && !insideEscape && escapeCode !== null && escapeCode !== END_CODE) {
				output += wrapAnsi(escapeCode);
			} else if (visible >= end) {
				if (escapeCode !== null) {
					output += wrapAnsi(ansiStyles.codes.get(parseInt(escapeCode, 10)) || END_CODE);
				}
				break;
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return output;
};