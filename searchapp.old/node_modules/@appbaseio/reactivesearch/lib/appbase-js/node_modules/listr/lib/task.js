'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isPromise = require('is-promise');
var streamToObservable = require('@samverschueren/stream-to-observable');
var Subject = require('rxjs').Subject;
var renderer = require('./renderer');
var state = require('./state');
var utils = require('./utils');
var ListrError = require('./listr-error');

var defaultSkipFn = function defaultSkipFn() {
	return false;
};

var Task = function (_Subject) {
	_inherits(Task, _Subject);

	function Task(listr, task, options) {
		_classCallCheck(this, Task);

		var _this = _possibleConstructorReturn(this, (Task.__proto__ || Object.getPrototypeOf(Task)).call(this));

		if (!task) {
			throw new TypeError('Expected a task');
		}

		if (typeof task.title !== 'string') {
			throw new TypeError('Expected property `title` to be of type `string`, got `' + _typeof(task.title) + '`');
		}

		if (typeof task.task !== 'function') {
			throw new TypeError('Expected property `task` to be of type `function`, got `' + _typeof(task.task) + '`');
		}

		if (task.skip && typeof task.skip !== 'function') {
			throw new TypeError('Expected property `skip` to be of type `function`, got `' + _typeof(task.skip) + '`');
		}

		if (task.enabled && typeof task.enabled !== 'function') {
			throw new TypeError('Expected property `enabled` to be of type `function`, got `' + _typeof(task.enabled) + '`');
		}

		_this._listr = listr;
		_this._options = options || {};
		_this._subtasks = [];
		_this._enabledFn = task.enabled;
		_this._isEnabled = true;

		_this.output = undefined;
		_this.title = task.title;
		_this.skip = task.skip || defaultSkipFn;
		_this.task = task.task;
		return _this;
	}

	_createClass(Task, [{
		key: 'check',
		value: function check(ctx) {
			// Check if a task is enabled or disabled
			if (this._state === undefined && this._enabledFn) {
				var isEnabled = this._enabledFn(ctx);

				if (this._isEnabled !== isEnabled) {
					this._isEnabled = isEnabled;

					this.next({
						type: 'ENABLED',
						data: isEnabled
					});
				}
			}
		}
	}, {
		key: 'hasSubtasks',
		value: function hasSubtasks() {
			return this._subtasks.length > 0;
		}
	}, {
		key: 'isPending',
		value: function isPending() {
			return this._state === state.PENDING;
		}
	}, {
		key: 'isSkipped',
		value: function isSkipped() {
			return this._state === state.SKIPPED;
		}
	}, {
		key: 'isCompleted',
		value: function isCompleted() {
			return this._state === state.COMPLETED;
		}
	}, {
		key: 'isEnabled',
		value: function isEnabled() {
			return this._isEnabled;
		}
	}, {
		key: 'hasFailed',
		value: function hasFailed() {
			return this._state === state.FAILED;
		}
	}, {
		key: 'run',
		value: function run(context, wrapper) {
			var _this2 = this;

			var handleResult = function handleResult(result) {
				// Detect the subtask
				if (utils.isListr(result)) {
					result._options = Object.assign(_this2._options, result._options);

					result.exitOnError = result._options.exitOnError;

					result.setRenderer(renderer.getRenderer('silent'));
					_this2._subtasks = result.tasks;

					_this2.next({
						type: 'SUBTASKS'
					});

					return result.run(context);
				}

				// Detect stream
				if (utils.isStream(result)) {
					result = streamToObservable(result);
				}

				// Detect Observable
				if (utils.isObservable(result)) {
					result = new Promise(function (resolve, reject) {
						result.subscribe({
							next: function next(data) {
								_this2.output = data;

								_this2.next({
									type: 'DATA',
									data: data
								});
							},
							error: reject,
							complete: resolve
						});
					});
				}

				// Detect promise
				if (isPromise(result)) {
					return result.then(handleResult);
				}

				return result;
			};

			return Promise.resolve().then(function () {
				_this2.state = state.PENDING;
				return _this2.skip(context);
			}).then(function (skipped) {
				if (skipped) {
					if (typeof skipped === 'string') {
						_this2.output = skipped;
					}
					_this2.state = state.SKIPPED;
					return;
				}

				return handleResult(_this2.task(context, wrapper));
			}).then(function () {
				if (_this2.isPending()) {
					_this2.state = state.COMPLETED;
				}
			}).catch(function (error) {
				_this2.state = state.FAILED;

				if (error instanceof ListrError) {
					wrapper.report(error);
					return;
				}

				if (!_this2.hasSubtasks()) {
					// Do not show the message if we have subtasks as the error is already shown in the subtask
					_this2.output = error.message;
				}

				_this2.next({
					type: 'DATA',
					data: error.message
				});

				wrapper.report(error);

				if (_this2._listr.exitOnError !== false) {
					// Do not exit when explicitely set to `false`
					throw error;
				}
			}).then(function () {
				// Mark the Observable as completed
				_this2.complete();
			});
		}
	}, {
		key: 'subtasks',
		get: function get() {
			return this._subtasks;
		}
	}, {
		key: 'state',
		set: function set(state) {
			this._state = state;

			this.next({
				type: 'STATE'
			});
		},
		get: function get() {
			return state.toString(this._state);
		}
	}]);

	return Task;
}(Subject);

module.exports = Task;