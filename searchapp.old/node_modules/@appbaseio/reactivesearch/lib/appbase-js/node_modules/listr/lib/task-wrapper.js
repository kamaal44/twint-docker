'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var state = require('./state');
var ListrError = require('./listr-error');

var TaskWrapper = function () {
	function TaskWrapper(task, errors) {
		_classCallCheck(this, TaskWrapper);

		this._task = task;
		this._errors = errors;
	}

	_createClass(TaskWrapper, [{
		key: 'report',
		value: function report(error) {
			if (error instanceof ListrError) {
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = error.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var err = _step.value;

						this._errors.push(err);
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
			} else {
				this._errors.push(error);
			}
		}
	}, {
		key: 'skip',
		value: function skip(message) {
			if (message && typeof message !== 'string') {
				throw new TypeError('Expected `message` to be of type `string`, got `' + (typeof message === 'undefined' ? 'undefined' : _typeof(message)) + '`');
			}

			if (message) {
				this._task.output = message;
			}

			this._task.state = state.SKIPPED;
		}
	}, {
		key: 'run',
		value: function run(ctx) {
			return this._task.run(ctx, this);
		}
	}, {
		key: 'title',
		set: function set(title) {
			this._task.title = title;

			this._task.next({
				type: 'TITLE',
				data: title
			});
		},
		get: function get() {
			return this._task.title;
		}
	}, {
		key: 'output',
		set: function set(data) {
			this._task.output = data;

			this._task.next({
				type: 'DATA',
				data: data
			});
		}
	}]);

	return TaskWrapper;
}();

module.exports = TaskWrapper;