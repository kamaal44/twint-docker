'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step('next', value);
          }, function (err) {
            step('throw', err);
          });
        }
      }
      return step('next');
    });
  };
}

var ReporterDispatcher = function () {
  function ReporterDispatcher() {
    _classCallCheck(this, ReporterDispatcher);

    this._reporters = [];
  }

  _createClass(ReporterDispatcher, [{
    key: 'register',
    value: function register(reporter) {
      this._reporters.push(reporter);
    }
  }, {
    key: 'unregister',
    value: function unregister(ReporterClass) {
      this._reporters = this._reporters.filter(function (reporter) {
        return !(reporter instanceof ReporterClass);
      });
    }
  }, {
    key: 'onTestResult',
    value: function onTestResult(test, testResult, results) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, reporter;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 3;
                _iterator = _this._reporters[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 14;
                  break;
                }

                reporter = _step.value;
                _context.t0 = reporter.onTestResult;

                if (!_context.t0) {
                  _context.next = 11;
                  break;
                }

                _context.next = 11;
                return reporter.onTestResult(test, testResult, results);

              case 11:
                _iteratorNormalCompletion = true;
                _context.next = 5;
                break;

              case 14:
                _context.next = 20;
                break;

              case 16:
                _context.prev = 16;
                _context.t1 = _context['catch'](3);
                _didIteratorError = true;
                _iteratorError = _context.t1;

              case 20:
                _context.prev = 20;
                _context.prev = 21;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 23:
                _context.prev = 23;

                if (!_didIteratorError) {
                  _context.next = 26;
                  break;
                }

                throw _iteratorError;

              case 26:
                return _context.finish(23);

              case 27:
                return _context.finish(20);

              case 28:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 16, 20, 28], [21,, 23, 27]]);
      }))();
    }
  }, {
    key: 'onTestStart',
    value: function onTestStart(test) {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, reporter;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context2.prev = 3;
                _iterator2 = _this2._reporters[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context2.next = 14;
                  break;
                }

                reporter = _step2.value;
                _context2.t0 = reporter.onTestStart;

                if (!_context2.t0) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 11;
                return reporter.onTestStart(test);

              case 11:
                _iteratorNormalCompletion2 = true;
                _context2.next = 5;
                break;

              case 14:
                _context2.next = 20;
                break;

              case 16:
                _context2.prev = 16;
                _context2.t1 = _context2['catch'](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context2.t1;

              case 20:
                _context2.prev = 20;
                _context2.prev = 21;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 23:
                _context2.prev = 23;

                if (!_didIteratorError2) {
                  _context2.next = 26;
                  break;
                }

                throw _iteratorError2;

              case 26:
                return _context2.finish(23);

              case 27:
                return _context2.finish(20);

              case 28:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[3, 16, 20, 28], [21,, 23, 27]]);
      }))();
    }
  }, {
    key: 'onRunStart',
    value: function onRunStart(results, options) {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, reporter;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context3.prev = 3;
                _iterator3 = _this3._reporters[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context3.next = 14;
                  break;
                }

                reporter = _step3.value;
                _context3.t0 = reporter.onRunStart;

                if (!_context3.t0) {
                  _context3.next = 11;
                  break;
                }

                _context3.next = 11;
                return reporter.onRunStart(results, options);

              case 11:
                _iteratorNormalCompletion3 = true;
                _context3.next = 5;
                break;

              case 14:
                _context3.next = 20;
                break;

              case 16:
                _context3.prev = 16;
                _context3.t1 = _context3['catch'](3);
                _didIteratorError3 = true;
                _iteratorError3 = _context3.t1;

              case 20:
                _context3.prev = 20;
                _context3.prev = 21;

                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }

              case 23:
                _context3.prev = 23;

                if (!_didIteratorError3) {
                  _context3.next = 26;
                  break;
                }

                throw _iteratorError3;

              case 26:
                return _context3.finish(23);

              case 27:
                return _context3.finish(20);

              case 28:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[3, 16, 20, 28], [21,, 23, 27]]);
      }))();
    }
  }, {
    key: 'onRunComplete',
    value: function onRunComplete(contexts, results) {
      var _this4 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, reporter;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _iteratorNormalCompletion4 = true;
                _didIteratorError4 = false;
                _iteratorError4 = undefined;
                _context4.prev = 3;
                _iterator4 = _this4._reporters[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                  _context4.next = 14;
                  break;
                }

                reporter = _step4.value;
                _context4.t0 = reporter.onRunComplete;

                if (!_context4.t0) {
                  _context4.next = 11;
                  break;
                }

                _context4.next = 11;
                return reporter.onRunComplete(contexts, results);

              case 11:
                _iteratorNormalCompletion4 = true;
                _context4.next = 5;
                break;

              case 14:
                _context4.next = 20;
                break;

              case 16:
                _context4.prev = 16;
                _context4.t1 = _context4['catch'](3);
                _didIteratorError4 = true;
                _iteratorError4 = _context4.t1;

              case 20:
                _context4.prev = 20;
                _context4.prev = 21;

                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }

              case 23:
                _context4.prev = 23;

                if (!_didIteratorError4) {
                  _context4.next = 26;
                  break;
                }

                throw _iteratorError4;

              case 26:
                return _context4.finish(23);

              case 27:
                return _context4.finish(20);

              case 28:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[3, 16, 20, 28], [21,, 23, 27]]);
      }))();
    }

    // Return a list of last errors for every reporter

  }, {
    key: 'getErrors',
    value: function getErrors() {
      return this._reporters.reduce(function (list, reporter) {
        var error = reporter.getLastError && reporter.getLastError();
        return error ? list.concat(error) : list;
      }, []);
    }
  }, {
    key: 'hasErrors',
    value: function hasErrors() {
      return this.getErrors().length !== 0;
    }
  }]);

  return ReporterDispatcher;
}();

exports.default = ReporterDispatcher;
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */