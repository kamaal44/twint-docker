'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var FailedTestsCache = function () {
  function FailedTestsCache() {
    _classCallCheck(this, FailedTestsCache);
  }

  _createClass(FailedTestsCache, [{
    key: 'filterTests',
    value: function filterTests(tests) {
      var _this = this;

      if (!this._enabledTestsMap) {
        return tests;
      }
      // $FlowFixMe
      return tests.filter(function (testResult) {
        return _this._enabledTestsMap[testResult.path];
      });
    }
  }, {
    key: 'setTestResults',
    value: function setTestResults(testResults) {
      this._enabledTestsMap = (testResults || []).filter(function (testResult) {
        return testResult.numFailingTests;
      }).reduce(function (suiteMap, testResult) {
        suiteMap[testResult.testFilePath] = testResult.testResults.filter(function (test) {
          return test.status === 'failed';
        }).reduce(function (testMap, test) {
          testMap[test.fullName] = true;
          return testMap;
        }, {});
        return suiteMap;
      }, {});
      this._enabledTestsMap = Object.freeze(this._enabledTestsMap);
    }
  }, {
    key: 'updateConfig',
    value: function updateConfig(globalConfig) {
      if (!this._enabledTestsMap) {
        return globalConfig;
      }
      // $FlowFixMe Object.assign
      var newConfig = Object.assign({}, globalConfig);
      newConfig.enabledTestsMap = this._enabledTestsMap;
      return Object.freeze(newConfig);
    }
  }]);

  return FailedTestsCache;
}();

exports.default = FailedTestsCache;
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */