'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _jestWatcher;

function _load_jestWatcher() {
  return _jestWatcher = require('jest-watcher');
}

var TestNamePatternPrompt = function (_PatternPrompt) {
  _inherits(TestNamePatternPrompt, _PatternPrompt);

  function TestNamePatternPrompt(pipe, prompt) {
    _classCallCheck(this, TestNamePatternPrompt);

    var _this = _possibleConstructorReturn(this, (TestNamePatternPrompt.__proto__ || Object.getPrototypeOf(TestNamePatternPrompt)).call(this, pipe, prompt));

    _this._entityName = 'tests';
    _this._cachedTestResults = [];
    return _this;
  }

  _createClass(TestNamePatternPrompt, [{
    key: '_onChange',
    value: function _onChange(pattern, options) {
      _get(TestNamePatternPrompt.prototype.__proto__ || Object.getPrototypeOf(TestNamePatternPrompt.prototype), '_onChange', this).call(this, pattern, options);
      this._printPrompt(pattern, options);
    }
  }, {
    key: '_printPrompt',
    value: function _printPrompt(pattern, options) {
      var pipe = this._pipe;
      (0, (_jestWatcher || _load_jestWatcher()).printPatternCaret)(pattern, pipe);
      (0, (_jestWatcher || _load_jestWatcher()).printRestoredPatternCaret)(pattern, this._currentUsageRows, pipe);
    }
  }, {
    key: '_getMatchedTests',
    value: function _getMatchedTests(pattern) {
      var regex = void 0;

      try {
        regex = new RegExp(pattern, 'i');
      } catch (e) {
        return [];
      }

      var matchedTests = [];

      this._cachedTestResults.forEach(function (_ref) {
        var testResults = _ref.testResults;
        return testResults.forEach(function (_ref2) {
          var title = _ref2.title;

          if (regex.test(title)) {
            matchedTests.push(title);
          }
        });
      });

      return matchedTests;
    }
  }, {
    key: 'updateCachedTestResults',
    value: function updateCachedTestResults() {
      var testResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this._cachedTestResults = testResults;
    }
  }]);

  return TestNamePatternPrompt;
}((_jestWatcher || _load_jestWatcher()).PatternPrompt);

exports.default = TestNamePatternPrompt;
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */