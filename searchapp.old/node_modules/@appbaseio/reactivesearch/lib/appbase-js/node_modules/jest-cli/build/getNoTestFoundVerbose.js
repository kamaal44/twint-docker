'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = getNoTestFoundVerbose;

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _pluralize;

function _load_pluralize() {
  return _pluralize = _interopRequireDefault(require('./pluralize'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function getNoTestFoundVerbose(testRunData, globalConfig) {
  var individualResults = testRunData.map(function (testRun) {
    var stats = testRun.matches.stats || {};
    var config = testRun.context.config;
    var statsMessage = Object.keys(stats).map(function (key) {
      if (key === 'roots' && config.roots.length === 1) {
        return null;
      }
      var value = config[key];
      if (value) {
        var matches = (0, (_pluralize || _load_pluralize()).default)('match', stats[key], 'es');
        return '  ' + key + ': ' + (_chalk || _load_chalk()).default.yellow(value) + ' - ' + matches;
      }
      return null;
    }).filter(function (line) {
      return line;
    }).join('\n');

    return testRun.matches.total ? 'In ' + (_chalk || _load_chalk()).default.bold(config.rootDir) + '\n' + ('  ' + (0, (_pluralize || _load_pluralize()).default)('file', testRun.matches.total || 0, 's') + ' checked.\n') + statsMessage : 'No files found in ' + config.rootDir + '.\n' + 'Make sure Jest\'s configuration does not exclude this directory.' + '\nTo set up Jest, make sure a package.json file exists.\n' + 'Jest Documentation: ' + 'facebook.github.io/jest/docs/configuration.html';
  });
  var dataMessage = void 0;

  if (globalConfig.runTestsByPath) {
    dataMessage = 'Files: ' + globalConfig.nonFlagArgs.map(function (p) {
      return '"' + p + '"';
    }).join(', ');
  } else {
    dataMessage = 'Pattern: ' + (_chalk || _load_chalk()).default.yellow(globalConfig.testPathPattern) + ' - 0 matches';
  }

  return (_chalk || _load_chalk()).default.bold('No tests found') + '\n' + individualResults.join('\n') + '\n' + dataMessage;
}