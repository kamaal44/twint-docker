'use strict';

// Try getting the real promise object from the context, if available. Someone
// could have overridden it in a test.

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Promise = global[Symbol.for('jest-native-promise')] || global.Promise;

var CancelError = function (_Error) {
  _inherits(CancelError, _Error);

  function CancelError() {
    _classCallCheck(this, CancelError);

    var _this = _possibleConstructorReturn(this, (CancelError.__proto__ || Object.getPrototypeOf(CancelError)).call(this, 'Promise was canceled'));

    _this.name = 'CancelError';
    return _this;
  }

  return CancelError;
}(Error);

var PCancelable = function () {
  _createClass(PCancelable, null, [{
    key: 'fn',
    value: function fn(_fn) {
      return function () {
        var args = [].slice.apply(arguments);
        return new PCancelable(function (onCancel, resolve, reject) {
          args.unshift(onCancel);
          _fn.apply(null, args).then(resolve, reject);
        });
      };
    }
  }]);

  function PCancelable(executor) {
    var _this2 = this;

    _classCallCheck(this, PCancelable);

    this._pending = true;
    this._canceled = false;

    this._promise = new Promise(function (resolve, reject) {
      _this2._reject = reject;

      return executor(function (fn) {
        _this2._cancel = fn;
      }, function (val) {
        _this2._pending = false;
        resolve(val);
      }, function (err) {
        _this2._pending = false;
        reject(err);
      });
    });
  }

  _createClass(PCancelable, [{
    key: 'then',
    value: function then() {
      return this._promise.then.apply(this._promise, arguments);
    }
  }, {
    key: 'catch',
    value: function _catch() {
      return this._promise.catch.apply(this._promise, arguments);
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      if (!this._pending || this._canceled) {
        return;
      }

      if (typeof this._cancel === 'function') {
        try {
          this._cancel();
        } catch (err) {
          this._reject(err);
        }
      }

      this._canceled = true;
      this._reject(new CancelError());
    }
  }, {
    key: 'canceled',
    get: function get() {
      return this._canceled;
    }
  }]);

  return PCancelable;
}();

Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);

module.exports = PCancelable;
module.exports.CancelError = CancelError;