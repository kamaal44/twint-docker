'use strict';

var execa = require('execa');
var lcid = require('lcid');
var mem = require('mem');

var defaultOpts = { spawn: true };
var defaultLocale = 'en_US';

function getEnvLocale(env) {
	env = env || process.env;
	return env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;
}

function parseLocale(x) {
	var env = x.split('\n').reduce(function (env, def) {
		def = def.split('=');
		env[def[0]] = def[1].replace(/^"|"$/g, '');
		return env;
	}, {});
	return getEnvLocale(env);
}

function getLocale(str) {
	return str && str.replace(/[.:].*/, '');
}

function getAppleLocale() {
	return execa.stdout('defaults', ['read', '-g', 'AppleLocale']);
}

function getAppleLocaleSync() {
	return execa.sync('defaults', ['read', '-g', 'AppleLocale']).stdout;
}

function getUnixLocale() {
	if (process.platform === 'darwin') {
		return getAppleLocale();
	}

	return execa.stdout('locale').then(function (stdout) {
		return getLocale(parseLocale(stdout));
	});
}

function getUnixLocaleSync() {
	if (process.platform === 'darwin') {
		return getAppleLocaleSync();
	}

	return getLocale(parseLocale(execa.sync('locale').stdout));
}

function getWinLocale() {
	return execa.stdout('wmic', ['os', 'get', 'locale']).then(function (stdout) {
		var lcidCode = parseInt(stdout.replace('Locale', ''), 16);
		return lcid.from(lcidCode);
	});
}

function getWinLocaleSync() {
	var stdout = execa.sync('wmic', ['os', 'get', 'locale']).stdout;
	var lcidCode = parseInt(stdout.replace('Locale', ''), 16);
	return lcid.from(lcidCode);
}

module.exports = mem(function (opts) {
	opts = opts || defaultOpts;
	var envLocale = getEnvLocale();
	var thenable = void 0;

	if (envLocale || opts.spawn === false) {
		thenable = Promise.resolve(getLocale(envLocale));
	} else if (process.platform === 'win32') {
		thenable = getWinLocale();
	} else {
		thenable = getUnixLocale();
	}

	return thenable.then(function (locale) {
		return locale || defaultLocale;
	}).catch(function () {
		return defaultLocale;
	});
});

module.exports.sync = mem(function (opts) {
	opts = opts || defaultOpts;
	var envLocale = getEnvLocale();
	var res = void 0;

	if (envLocale || opts.spawn === false) {
		res = getLocale(envLocale);
	} else {
		try {
			if (process.platform === 'win32') {
				res = getWinLocaleSync();
			} else {
				res = getUnixLocaleSync();
			}
		} catch (err) {}
	}

	return res || defaultLocale;
});