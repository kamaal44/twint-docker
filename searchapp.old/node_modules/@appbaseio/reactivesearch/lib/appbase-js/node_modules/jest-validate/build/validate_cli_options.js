'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.DOCUMENTATION_NOTE = undefined;
exports.default = validateCLIOptions;

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _utils;

function _load_utils() {
  return _utils = require('./utils');
}

var _deprecated;

function _load_deprecated() {
  return _deprecated = require('./deprecated');
}

var _default_config;

function _load_default_config() {
  return _default_config = _interopRequireDefault(require('./default_config'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var BULLET = (_chalk || _load_chalk()).default.bold('\u25CF');
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var DOCUMENTATION_NOTE = exports.DOCUMENTATION_NOTE = '  ' + (_chalk || _load_chalk()).default.bold('CLI Options Documentation:') + '\n  https://jestjs.io/docs/en/cli.html\n';

var createCLIValidationError = function createCLIValidationError(unrecognizedOptions, allowedOptions) {
  var title = BULLET + ' Unrecognized CLI Parameter';
  var message = void 0;
  var comment = '  ' + (_chalk || _load_chalk()).default.bold('CLI Options Documentation') + ':\n' + '  https://jestjs.io/docs/en/cli.html\n';

  if (unrecognizedOptions.length === 1) {
    var unrecognized = unrecognizedOptions[0];
    var didYouMeanMessage = (0, (_utils || _load_utils()).createDidYouMeanMessage)(unrecognized, Array.from(allowedOptions));
    message = '  Unrecognized option ' + (_chalk || _load_chalk()).default.bold((0, (_utils || _load_utils()).format)(unrecognized)) + '.' + (didYouMeanMessage ? ' ' + didYouMeanMessage : '');
  } else {
    title += 's';
    message = '  Following options were not recognized:\n' + ('  ' + (_chalk || _load_chalk()).default.bold((0, (_utils || _load_utils()).format)(unrecognizedOptions)));
  }

  return new (_utils || _load_utils()).ValidationError(title, message, comment);
};

var logDeprecatedOptions = function logDeprecatedOptions(deprecatedOptions, deprecationEntries, argv) {
  deprecatedOptions.forEach(function (opt) {
    (0, (_deprecated || _load_deprecated()).deprecationWarning)(argv, opt, deprecationEntries, Object.assign({}, (_default_config || _load_default_config()).default, {
      comment: DOCUMENTATION_NOTE
    }));
  });
};

function validateCLIOptions(argv, options) {
  var yargsSpecialOptions = ['$0', '_', 'help', 'h'];
  var deprecationEntries = options.deprecationEntries || {};
  var allowedOptions = Object.keys(options).reduce(function (acc, option) {
    return acc.add(option).add(options[option].alias || option);
  }, new Set(yargsSpecialOptions));
  var unrecognizedOptions = Object.keys(argv).filter(function (arg) {
    return !allowedOptions.has(arg);
  });

  if (unrecognizedOptions.length) {
    throw createCLIValidationError(unrecognizedOptions, allowedOptions);
  }

  var CLIDeprecations = Object.keys(deprecationEntries).reduce(function (acc, entry) {
    if (options[entry]) {
      acc[entry] = deprecationEntries[entry];
      if (options[entry].alias) {
        acc[options[entry].alias] = deprecationEntries[entry];
      }
    }
    return acc;
  }, {});
  var deprecations = new Set(Object.keys(CLIDeprecations));
  var deprecatedOptions = Object.keys(argv).filter(function (arg) {
    return deprecations.has(arg) && argv[arg] != null;
  });

  if (deprecatedOptions.length) {
    logDeprecatedOptions(deprecatedOptions, CLIDeprecations, argv);
  }

  return true;
}