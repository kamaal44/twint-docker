'use strict';

var _templateObject = _taggedTemplateLiteral(['\n          Could not parse lint-staged config.\n\n          ', '\n        '], ['\n          Could not parse lint-staged config.\n\n          ', '\n        ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        Please make sure you have created it correctly.\n        See https://github.com/okonet/lint-staged#configuration.\n      '], ['\n        Please make sure you have created it correctly.\n        See https://github.com/okonet/lint-staged#configuration.\n      ']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var dedent = require('dedent');
var cosmiconfig = require('cosmiconfig');
var stringifyObject = require('stringify-object');

var _require = require('./getConfig'),
    getConfig = _require.getConfig,
    validateConfig = _require.validateConfig;

var printErrors = require('./printErrors');
var runAll = require('./runAll');

var debug = require('debug')('lint-staged');

// Force colors for packages that depend on https://www.npmjs.com/package/supports-color
// but do this only in TTY mode
if (process.stdout.isTTY) {
  // istanbul ignore next
  process.env.FORCE_COLOR = '1';
}

var errConfigNotFound = new Error('Config could not be found');

function resolveConfig(configPath) {
  try {
    return require.resolve(configPath);
  } catch (ignore) {
    return configPath;
  }
}

function loadConfig(configPath) {
  var explorer = cosmiconfig('lint-staged', {
    searchPlaces: ['package.json', '.lintstagedrc', '.lintstagedrc.json', '.lintstagedrc.yaml', '.lintstagedrc.yml', '.lintstagedrc.js', 'lint-staged.config.js']
  });

  return configPath ? explorer.load(resolveConfig(configPath)) : explorer.search();
}

/**
 * Root lint-staged function that is called from .bin
 */
module.exports = function lintStaged() {
  var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : console;
  var configPath = arguments[1];
  var debugMode = arguments[2];

  debug('Loading config using `cosmiconfig`');

  return loadConfig(configPath).then(function (result) {
    if (result == null) throw errConfigNotFound;

    debug('Successfully loaded config from `%s`:\n%O', result.filepath, result.config);
    // result.config is the parsed configuration object
    // result.filepath is the path to the config file that was found
    var config = validateConfig(getConfig(result.config, debugMode));
    if (debugMode) {
      // Log using logger to be able to test through `consolemock`.
      logger.log('Running lint-staged with the following config:');
      logger.log(stringifyObject(config, { indent: '  ' }));
    } else {
      // We might not be in debug mode but `DEBUG=lint-staged*` could have
      // been set.
      debug('Normalized config:\n%O', config);
    }

    runAll(config).then(function () {
      debug('linters were executed successfully!');
      // No errors, exiting with 0
    }).catch(function (error) {
      // Errors detected, printing and exiting with non-zero
      process.exitCode = 1;
      printErrors(error);
    });
  }).catch(function (err) {
    process.exitCode = 1;
    if (err === errConfigNotFound) {
      logger.error(err.message + '.');
    } else {
      // It was probably a parsing error
      logger.error(dedent(_templateObject, err));
    }
    logger.error(); // empty line
    // Print helpful message for all errors
    logger.error(dedent(_templateObject2));
  });
};