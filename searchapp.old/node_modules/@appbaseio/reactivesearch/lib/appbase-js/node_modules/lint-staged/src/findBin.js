'use strict';

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var parse = require('string-argv');
var npmWhich = require('npm-which')(process.cwd());
var checkPkgScripts = require('./checkPkgScripts');

var debug = require('debug')('lint-staged:find-bin');

// Find and load the package.json at the root of the project.
var pkg = void 0;
try {
  // eslint-disable-next-line import/no-dynamic-require, global-require
  pkg = require(process.cwd() + '/package.json');
  debug('Loaded package.json using `process.cwd()`');
} catch (ignore) {
  debug('Could not load package.json using `process.cwd()`');
  pkg = {};
}

var cache = new Map();

module.exports = function findBin(cmd) {
  debug('Resolving binary for command `%s`', cmd);

  /*
   *  Try to locate the binary in node_modules/.bin and if this fails, in
   *  $PATH.
   *
   *  This allows to use linters installed for the project:
   *
   *  "lint-staged": {
   *    "*.js": "eslint"
   *  }
   */

  var _parse = parse(cmd),
      _parse2 = _toArray(_parse),
      binName = _parse2[0],
      args = _parse2.slice(1);

  if (cache.has(binName)) {
    debug('Resolving binary for `%s` from cache', binName);
    return { bin: cache.get(binName), args: args };
  }

  try {
    /* npm-which tries to resolve the bin in local node_modules/.bin */
    /* and if this fails it look in $PATH */
    var bin = npmWhich.sync(binName);
    debug('Binary for `%s` resolved to `%s`', cmd, bin);
    cache.set(binName, bin);
    return { bin: bin, args: args };
  } catch (err) {
    // throw helpful error if matching script is present in package.json
    checkPkgScripts(pkg, cmd, binName, args);
    throw new Error(binName + ' could not be found. Try `npm install ' + binName + '`.');
  }
};