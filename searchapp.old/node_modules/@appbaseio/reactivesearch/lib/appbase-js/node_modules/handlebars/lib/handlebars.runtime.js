'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _base = require('./handlebars/base');

var base = _interopRequireWildcard(_base);

var _safeString = require('./handlebars/safe-string');

var _safeString2 = _interopRequireDefault(_safeString);

var _exception = require('./handlebars/exception');

var _exception2 = _interopRequireDefault(_exception);

var _utils = require('./handlebars/utils');

var Utils = _interopRequireWildcard(_utils);

var _runtime = require('./handlebars/runtime');

var runtime = _interopRequireWildcard(_runtime);

var _noConflict = require('./handlebars/no-conflict');

var _noConflict2 = _interopRequireDefault(_noConflict);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _safeString2.default;
  hb.Exception = _exception2.default;
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)


var inst = create();
inst.create = create;

(0, _noConflict2.default)(inst);

inst['default'] = inst;

exports.default = inst;