'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.setMatchers = exports.getMatchers = exports.setState = exports.getState = exports.INTERNAL_MATCHER_FLAG = undefined;

var _asymmetric_matchers = require('./asymmetric_matchers');

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

// Global matchers object holds the list of available matchers and
// the state, that can hold matcher specific values that change over time.
var JEST_MATCHERS_OBJECT = Symbol.for('$$jest-matchers-object');

// Notes a built-in/internal Jest matcher.
// Jest may override the stack trace of Errors thrown by internal matchers.
var INTERNAL_MATCHER_FLAG = exports.INTERNAL_MATCHER_FLAG = Symbol.for('$$jest-internal-matcher');

if (!global[JEST_MATCHERS_OBJECT]) {
  Object.defineProperty(global, JEST_MATCHERS_OBJECT, {
    value: {
      matchers: Object.create(null),
      state: {
        assertionCalls: 0,
        expectedAssertionsNumber: null,
        isExpectingAssertions: false,
        suppressedErrors: [] // errors that are not thrown immediately.
      }
    }
  });
}

var getState = exports.getState = function () {
  return global[JEST_MATCHERS_OBJECT].state;
};

var setState = exports.setState = function (state) {
  Object.assign(global[JEST_MATCHERS_OBJECT].state, state);
};

var getMatchers = exports.getMatchers = function () {
  return global[JEST_MATCHERS_OBJECT].matchers;
};

var setMatchers = exports.setMatchers = function (matchers, isInternal, expect) {
  Object.keys(matchers).forEach(function (key) {
    var matcher = matchers[key];
    Object.defineProperty(matcher, INTERNAL_MATCHER_FLAG, {
      value: isInternal
    });

    if (!isInternal) {
      // expect is defined

      var CustomMatcher = function (_asymmetric_matchers$) {
        _inherits(CustomMatcher, _asymmetric_matchers$);

        function CustomMatcher() {
          _classCallCheck(this, CustomMatcher);

          var inverse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          var _this = _possibleConstructorReturn(this, (CustomMatcher.__proto__ || Object.getPrototypeOf(CustomMatcher)).call(this));

          _this.inverse = inverse;

          for (var _len = arguments.length, sample = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            sample[_key - 1] = arguments[_key];
          }

          _this.sample = sample;
          return _this;
        }

        _createClass(CustomMatcher, [{
          key: 'asymmetricMatch',
          value: function asymmetricMatch(other) {
            var _ref = matcher.apply(undefined, [other].concat(_toConsumableArray(this.sample)));

            var pass = _ref.pass;

            return this.inverse ? !pass : pass;
          }
        }, {
          key: 'toString',
          value: function toString() {
            return '' + (this.inverse ? 'not.' : '') + key;
          }
        }, {
          key: 'getExpectedType',
          value: function getExpectedType() {
            return 'any';
          }
        }, {
          key: 'toAsymmetricMatcher',
          value: function toAsymmetricMatcher() {
            return this.toString() + '<' + this.sample.join(', ') + '>';
          }
        }]);

        return CustomMatcher;
      }(_asymmetric_matchers.AsymmetricMatcher);

      expect[key] = function () {
        for (var _len2 = arguments.length, sample = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          sample[_key2] = arguments[_key2];
        }

        return new (Function.prototype.bind.apply(CustomMatcher, [null].concat([false], sample)))();
      };
      if (!expect.not) {
        expect.not = {};
      }
      expect.not[key] = function () {
        for (var _len3 = arguments.length, sample = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          sample[_key3] = arguments[_key3];
        }

        return new (Function.prototype.bind.apply(CustomMatcher, [null].concat([true], sample)))();
      };
    }
  });

  Object.assign(global[JEST_MATCHERS_OBJECT].matchers, matchers);
};