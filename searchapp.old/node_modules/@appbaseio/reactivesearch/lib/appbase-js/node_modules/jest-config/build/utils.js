'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.isJSONString = exports.getTestEnvironment = exports._replaceRootDirTags = exports.replaceRootDirInPath = exports.escapeGlobCharacters = exports.resolve = exports.DOCUMENTATION_NOTE = exports.BULLET = undefined;

var _path;

function _load_path() {
  return _path = _interopRequireDefault(require('path'));
}

var _jestValidate;

function _load_jestValidate() {
  return _jestValidate = require('jest-validate');
}

var _jestResolve;

function _load_jestResolve() {
  return _jestResolve = _interopRequireDefault(require('jest-resolve'));
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var BULLET = exports.BULLET = (_chalk || _load_chalk()).default.bold('\u25CF ');
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var DOCUMENTATION_NOTE = exports.DOCUMENTATION_NOTE = '  ' + (_chalk || _load_chalk()).default.bold('Configuration Documentation:') + '\n  https://jestjs.io/docs/configuration.html\n';

var createValidationError = function createValidationError(message) {
  return new (_jestValidate || _load_jestValidate()).ValidationError(BULLET + 'Validation Error', message, DOCUMENTATION_NOTE);
};

var resolve = exports.resolve = function (resolver, _ref) {
  var key = _ref.key,
      filePath = _ref.filePath,
      rootDir = _ref.rootDir,
      optional = _ref.optional;

  var module = (_jestResolve || _load_jestResolve()).default.findNodeModule(replaceRootDirInPath(rootDir, filePath), {
    basedir: rootDir,
    resolver: resolver
  });

  if (!module && !optional) {
    throw createValidationError('  Module ' + (_chalk || _load_chalk()).default.bold(filePath) + ' in the ' + (_chalk || _load_chalk()).default.bold(key) + ' option was not found.\n         ' + (_chalk || _load_chalk()).default.bold('<rootDir>') + ' is: ' + rootDir);
  }

  return module;
};

var escapeGlobCharacters = exports.escapeGlobCharacters = function (path) {
  return path.replace(/([()*{}\[\]!?\\])/g, '\\$1');
};

var replaceRootDirInPath = exports.replaceRootDirInPath = function (rootDir, filePath) {
  if (!/^<rootDir>/.test(filePath)) {
    return filePath;
  }

  return (_path || _load_path()).default.resolve(rootDir, (_path || _load_path()).default.normalize('./' + filePath.substr('<rootDir>'.length)));
};

var _replaceRootDirInObject = function _replaceRootDirInObject(rootDir, config) {
  if (config !== null) {
    var newConfig = {};
    for (var configKey in config) {
      newConfig[configKey] = configKey === 'rootDir' ? config[configKey] : _replaceRootDirTags(rootDir, config[configKey]);
    }
    return newConfig;
  }
  return config;
};

var _replaceRootDirTags = exports._replaceRootDirTags = function (rootDir, config) {
  switch (typeof config === 'undefined' ? 'undefined' : _typeof(config)) {
    case 'object':
      if (Array.isArray(config)) {
        return config.map(function (item) {
          return _replaceRootDirTags(rootDir, item);
        });
      }
      if (config instanceof RegExp) {
        return config;
      }
      return _replaceRootDirInObject(rootDir, config);
    case 'string':
      return replaceRootDirInPath(rootDir, config);
  }
  return config;
};

/**
 * Finds the test environment to use:
 *
 * 1. looks for jest-environment-<name> relative to project.
 * 1. looks for jest-environment-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */
var getTestEnvironment = exports.getTestEnvironment = function (config) {
  var env = replaceRootDirInPath(config.rootDir, config.testEnvironment);
  var module = (_jestResolve || _load_jestResolve()).default.findNodeModule('jest-environment-' + env, {
    basedir: config.rootDir
  });
  if (module) {
    return module;
  }

  try {
    return require.resolve('jest-environment-' + env);
  } catch (e) {}

  module = (_jestResolve || _load_jestResolve()).default.findNodeModule(env, {
    basedir: config.rootDir
  });
  if (module) {
    return module;
  }

  try {
    return require.resolve(env);
  } catch (e) {}

  throw createValidationError('  Test environment ' + (_chalk || _load_chalk()).default.bold(env) + ' cannot be found. Make sure the ' + (_chalk || _load_chalk()).default.bold('testEnvironment') + ' configuration option points to an existing node module.');
};

var isJSONString = exports.isJSONString = function (text) {
  return text && typeof text === 'string' && text.startsWith('{') && text.endsWith('}');
};