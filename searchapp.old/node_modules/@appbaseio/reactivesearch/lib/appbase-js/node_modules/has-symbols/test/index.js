'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var test = require('tape');
var hasSymbols = require('../');
var runSymbolTests = require('./tests');

test('interface', function (t) {
	t.equal(typeof hasSymbols === 'undefined' ? 'undefined' : _typeof(hasSymbols), 'function', 'is a function');
	t.equal(_typeof(hasSymbols()), 'boolean', 'returns a boolean');
	t.end();
});

test('Symbols are supported', { skip: !hasSymbols() }, function (t) {
	runSymbolTests(t);
	t.end();
});

test('Symbols are not supported', { skip: hasSymbols() }, function (t) {
	t.equal(typeof Symbol === 'undefined' ? 'undefined' : _typeof(Symbol), 'undefined', 'global Symbol is undefined');
	t.equal(_typeof(Object.getOwnPropertySymbols), 'undefined', 'Object.getOwnPropertySymbols does not exist');
	t.end();
});