'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Console;

function _load_Console() {
  return _Console = _interopRequireDefault(require('./Console'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var NullConsole = function (_default) {
  _inherits(NullConsole, _default);

  function NullConsole() {
    _classCallCheck(this, NullConsole);

    return _possibleConstructorReturn(this, (NullConsole.__proto__ || Object.getPrototypeOf(NullConsole)).apply(this, arguments));
  }

  _createClass(NullConsole, [{
    key: 'assert',
    value: function assert() {}
  }, {
    key: 'debug',
    value: function debug() {}
  }, {
    key: 'dir',
    value: function dir() {}
  }, {
    key: 'error',
    value: function error() {}
  }, {
    key: 'info',
    value: function info() {}
  }, {
    key: 'log',
    value: function log() {}
  }, {
    key: 'time',
    value: function time() {}
  }, {
    key: 'timeEnd',
    value: function timeEnd() {}
  }, {
    key: 'trace',
    value: function trace() {}
  }, {
    key: 'warn',
    value: function warn() {}
  }]);

  return NullConsole;
}((_Console || _load_Console()).default);

exports.default = NullConsole;
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */