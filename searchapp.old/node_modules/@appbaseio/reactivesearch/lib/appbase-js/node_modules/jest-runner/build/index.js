'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _exit;

function _load_exit() {
  return _exit = _interopRequireDefault(require('exit'));
}

var _run_test;

function _load_run_test() {
  return _run_test = _interopRequireDefault(require('./run_test'));
}

var _throat;

function _load_throat() {
  return _throat = _interopRequireDefault(require('throat'));
}

var _jestWorker;

function _load_jestWorker() {
  return _jestWorker = _interopRequireDefault(require('jest-worker'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step('next', value);
          }, function (err) {
            step('throw', err);
          });
        }
      }
      return step('next');
    });
  };
}
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var TEST_WORKER_PATH = require.resolve('./test_worker');

var TestRunner = function () {
  function TestRunner(globalConfig) {
    _classCallCheck(this, TestRunner);

    this._globalConfig = globalConfig;
  }

  _createClass(TestRunner, [{
    key: 'runTests',
    value: function runTests(tests, watcher, onStart, onResult, onFailure, options) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return options.serial ? _this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure) : _this._createParallelTestRun(tests, watcher, onStart, onResult, onFailure);

              case 2:
                return _context.abrupt('return', _context.sent);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }))();
    }
  }, {
    key: '_createInBandTestRun',
    value: function _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var mutex;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                process.env.JEST_WORKER_ID = '1';
                mutex = (0, (_throat || _load_throat()).default)(1);
                return _context3.abrupt('return', tests.reduce(function (promise, test) {
                  return mutex(function () {
                    return promise.then(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              if (!watcher.isInterrupted()) {
                                _context2.next = 2;
                                break;
                              }

                              throw new CancelRun();

                            case 2:
                              _context2.next = 4;
                              return onStart(test);

                            case 4:
                              return _context2.abrupt('return', (0, (_run_test || _load_run_test()).default)(test.path, _this2._globalConfig, test.context.config, test.context.resolver));

                            case 5:
                            case 'end':
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this);
                    }))).then(function (result) {
                      return onResult(test, result);
                    }).catch(function (err) {
                      return onFailure(test, err);
                    });
                  });
                }, Promise.resolve()));

              case 3:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }))();
    }
  }, {
    key: '_createParallelTestRun',
    value: function _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var worker, mutex, runTestInWorker, onError, onInterrupt, runAllTests, cleanup;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // $FlowFixMe: class object is augmented with worker when instantiating.
                worker = new (_jestWorker || _load_jestWorker()).default(TEST_WORKER_PATH, {
                  exposedMethods: ['worker'],
                  forkOptions: { stdio: 'inherit' },
                  maxRetries: 3,
                  numWorkers: _this3._globalConfig.maxWorkers
                });
                mutex = (0, (_throat || _load_throat()).default)(_this3._globalConfig.maxWorkers);

                // Send test suites to workers continuously instead of all at once to track
                // the start time of individual tests.

                runTestInWorker = function runTestInWorker(test) {
                  return mutex(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            if (!watcher.isInterrupted()) {
                              _context4.next = 2;
                              break;
                            }

                            return _context4.abrupt('return', Promise.reject());

                          case 2:
                            _context4.next = 4;
                            return onStart(test);

                          case 4:
                            return _context4.abrupt('return', worker.worker({
                              config: test.context.config,
                              globalConfig: _this3._globalConfig,
                              path: test.path,
                              rawModuleMap: watcher.isWatchMode() ? test.context.moduleMap.getRawModuleMap() : null
                            }));

                          case 5:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, this);
                  })));
                };

                onError = function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(err, test) {
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            _context5.next = 2;
                            return onFailure(test, err);

                          case 2:
                            if (err.type === 'ProcessTerminatedError') {
                              console.error('A worker process has quit unexpectedly! ' + 'Most likely this is an initialization error.');
                              (0, (_exit || _load_exit()).default)(1);
                            }

                          case 3:
                          case 'end':
                            return _context5.stop();
                        }
                      }
                    }, _callee5, this);
                  }));

                  return function onError(_x, _x2) {
                    return _ref3.apply(this, arguments);
                  };
                }();

                onInterrupt = new Promise(function (_, reject) {
                  watcher.on('change', function (state) {
                    if (state.interrupted) {
                      reject(new CancelRun());
                    }
                  });
                });
                runAllTests = Promise.all(tests.map(function (test) {
                  return runTestInWorker(test).then(function (testResult) {
                    return onResult(test, testResult);
                  }).catch(function (error) {
                    return onError(error, test);
                  });
                }));

                cleanup = function cleanup() {
                  return worker.end();
                };

                return _context6.abrupt('return', Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup));

              case 8:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }))();
    }
  }]);

  return TestRunner;
}();

var CancelRun = function (_Error) {
  _inherits(CancelRun, _Error);

  function CancelRun(message) {
    _classCallCheck(this, CancelRun);

    var _this4 = _possibleConstructorReturn(this, (CancelRun.__proto__ || Object.getPrototypeOf(CancelRun)).call(this, message));

    _this4.name = 'CancelRun';
    return _this4;
  }

  return CancelRun;
}(Error);

module.exports = TestRunner;