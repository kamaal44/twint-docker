'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path;

function _load_path() {
  return _path = _interopRequireDefault(require('path'));
}

var _child_process;

function _load_child_process() {
  return _child_process = _interopRequireDefault(require('child_process'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step('next', value);
          }, function (err) {
            step('throw', err);
          });
        }
      }
      return step('next');
    });
  };
}
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var findChangedFilesUsingCommand = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(args, cwd) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', new Promise(function (resolve, reject) {
              var child = (_child_process || _load_child_process()).default.spawn('git', args, { cwd: cwd });
              var stdout = '';
              var stderr = '';
              child.stdout.on('data', function (data) {
                return stdout += data;
              });
              child.stderr.on('data', function (data) {
                return stderr += data;
              });
              child.on('error', function (e) {
                return reject(e);
              });
              child.on('close', function (code) {
                if (code === 0) {
                  stdout = stdout.trim();
                  if (stdout === '') {
                    resolve([]);
                  } else {
                    resolve(stdout.split('\n').filter(function (s) {
                      return s !== '';
                    }).map(function (changedPath) {
                      return (_path || _load_path()).default.resolve(cwd, changedPath);
                    }));
                  }
                } else {
                  reject(code + ': ' + stderr);
                }
              });
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function findChangedFilesUsingCommand(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var adapter = {
  findChangedFiles: function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(cwd, options) {
      var changedSince, includePaths, committed, staged, unstaged;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              changedSince = options && (options.withAncestor ? 'HEAD^' : options.changedSince);
              includePaths = options && options.includePaths || [];

              if (!(options && options.lastCommit)) {
                _context2.next = 8;
                break;
              }

              _context2.next = 5;
              return findChangedFilesUsingCommand(['show', '--name-only', '--pretty=%b', 'HEAD'].concat(includePaths), cwd);

            case 5:
              return _context2.abrupt('return', _context2.sent);

            case 8:
              if (!changedSince) {
                _context2.next = 21;
                break;
              }

              _context2.next = 11;
              return findChangedFilesUsingCommand(['log', '--name-only', '--pretty=%b', 'HEAD', '^' + changedSince].concat(includePaths), cwd);

            case 11:
              committed = _context2.sent;
              _context2.next = 14;
              return findChangedFilesUsingCommand(['diff', '--cached', '--name-only'].concat(includePaths), cwd);

            case 14:
              staged = _context2.sent;
              _context2.next = 17;
              return findChangedFilesUsingCommand(['ls-files', '--other', '--modified', '--exclude-standard'].concat(includePaths), cwd);

            case 17:
              unstaged = _context2.sent;
              return _context2.abrupt('return', [].concat(_toConsumableArray(committed), _toConsumableArray(staged), _toConsumableArray(unstaged)));

            case 21:
              _context2.next = 23;
              return findChangedFilesUsingCommand(['ls-files', '--other', '--modified', '--exclude-standard'].concat(includePaths), cwd);

            case 23:
              return _context2.abrupt('return', _context2.sent);

            case 24:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function findChangedFiles(_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }(),

  getRoot: function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(cwd) {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt('return', new Promise(function (resolve) {
                try {
                  var stdout = '';
                  var options = ['rev-parse', '--show-toplevel'];
                  var child = (_child_process || _load_child_process()).default.spawn('git', options, { cwd: cwd });
                  child.stdout.on('data', function (data) {
                    return stdout += data;
                  });
                  child.on('error', function () {
                    return resolve(null);
                  });
                  child.on('close', function (code) {
                    return resolve(code === 0 ? stdout.trim() : null);
                  });
                } catch (e) {
                  resolve(null);
                }
              }));

            case 1:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function getRoot(_x5) {
      return _ref3.apply(this, arguments);
    };
  }()
};

exports.default = adapter;