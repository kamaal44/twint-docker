'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.matcherHint = exports.pluralize = exports.ensureNumbers = exports.ensureExpectedIsNumber = exports.ensureActualIsNumber = exports.ensureNoExpected = exports.printWithType = exports.printExpected = exports.printReceived = exports.highlightTrailingWhitespace = exports.stringify = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.SUGGEST_TO_EQUAL = exports.RECEIVED_COLOR = exports.EXPECTED_COLOR = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _jestGetType = require('jest-get-type');

var _jestGetType2 = _interopRequireDefault(_jestGetType);

var _prettyFormat = require('pretty-format');

var _prettyFormat2 = _interopRequireDefault(_prettyFormat);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var _prettyFormat$plugins = _prettyFormat2.default.plugins;
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var AsymmetricMatcher = _prettyFormat$plugins.AsymmetricMatcher,
    DOMCollection = _prettyFormat$plugins.DOMCollection,
    DOMElement = _prettyFormat$plugins.DOMElement,
    Immutable = _prettyFormat$plugins.Immutable,
    ReactElement = _prettyFormat$plugins.ReactElement,
    ReactTestComponent = _prettyFormat$plugins.ReactTestComponent;

var PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];

var EXPECTED_COLOR = exports.EXPECTED_COLOR = _chalk2.default.green;
var RECEIVED_COLOR = exports.RECEIVED_COLOR = _chalk2.default.red;

var NUMBERS = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen'];

var SUGGEST_TO_EQUAL = exports.SUGGEST_TO_EQUAL = _chalk2.default.dim('Note that you are testing for equality with the stricter `toBe` matcher using `Object.is`. For deep equality only, use `toEqual` instead.');

var SUGGEST_TO_CONTAIN_EQUAL = exports.SUGGEST_TO_CONTAIN_EQUAL = _chalk2.default.dim('Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.');

var stringify = exports.stringify = function (object) {
  var maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

  var MAX_LENGTH = 10000;
  var result = void 0;

  try {
    result = (0, _prettyFormat2.default)(object, {
      maxDepth: maxDepth,
      min: true,
      plugins: PLUGINS
    });
  } catch (e) {
    result = (0, _prettyFormat2.default)(object, {
      callToJSON: false,
      maxDepth: maxDepth,
      min: true,
      plugins: PLUGINS
    });
  }

  return result.length >= MAX_LENGTH && maxDepth > 1 ? stringify(object, Math.floor(maxDepth / 2)) : result;
};

var highlightTrailingWhitespace = exports.highlightTrailingWhitespace = function (text) {
  return text.replace(/\s+$/gm, _chalk2.default.inverse('$&'));
};

var printReceived = exports.printReceived = function (object) {
  return RECEIVED_COLOR(highlightTrailingWhitespace(stringify(object)));
};
var printExpected = exports.printExpected = function (value) {
  return EXPECTED_COLOR(highlightTrailingWhitespace(stringify(value)));
};

var printWithType = exports.printWithType = function (name, received, print) {
  var type = (0, _jestGetType2.default)(received);
  return name + ':' + (type !== 'null' && type !== 'undefined' ? '\n  ' + type + ': ' : ' ') + print(received);
};

var ensureNoExpected = exports.ensureNoExpected = function (expected, matcherName) {
  matcherName || (matcherName = 'This');
  if (typeof expected !== 'undefined') {
    throw new Error(matcherHint('[.not]' + matcherName, undefined, '') + '\n\n' + 'Matcher does not accept any arguments.\n' + printWithType('Got', expected, printExpected));
  }
};

var ensureActualIsNumber = exports.ensureActualIsNumber = function (actual, matcherName) {
  matcherName || (matcherName = 'This matcher');
  if (typeof actual !== 'number') {
    throw new Error(matcherHint('[.not]' + matcherName) + '\n\n' + 'Received value must be a number.\n' + printWithType('Received', actual, printReceived));
  }
};

var ensureExpectedIsNumber = exports.ensureExpectedIsNumber = function (expected, matcherName) {
  matcherName || (matcherName = 'This matcher');
  if (typeof expected !== 'number') {
    throw new Error(matcherHint('[.not]' + matcherName) + '\n\n' + 'Expected value must be a number.\n' + printWithType('Got', expected, printExpected));
  }
};

var ensureNumbers = exports.ensureNumbers = function (actual, expected, matcherName) {
  ensureActualIsNumber(actual, matcherName);
  ensureExpectedIsNumber(expected, matcherName);
};

var pluralize = exports.pluralize = function (word, count) {
  return (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's');
};

var matcherHint = exports.matcherHint = function (matcherName) {
  var received = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'received';
  var expected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'expected';
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var comment = options.comment,
      isDirectExpectCall = options.isDirectExpectCall,
      isNot = options.isNot,
      secondArgument = options.secondArgument;

  return _chalk2.default.dim('expect' + (isDirectExpectCall ? '' : '(')) + RECEIVED_COLOR(received) + (isNot ? _chalk2.default.dim(').') + 'not' + _chalk2.default.dim(matcherName + '(') : _chalk2.default.dim((isDirectExpectCall ? '' : ')') + matcherName + '(')) + EXPECTED_COLOR(expected) + (secondArgument ? '' + _chalk2.default.dim(', ') + EXPECTED_COLOR(secondArgument) : '') + _chalk2.default.dim(')' + (comment ? ' // ' + comment : ''));
};