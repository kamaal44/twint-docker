'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _crossFetch = require('cross-fetch');

var _crossFetch2 = _interopRequireDefault(_crossFetch);

var _index = require('../../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * To perform fetch request
 * @param {Object} args
 * @param {String} args.method
 * @param {String} args.path
 * @param {Object} args.params
 * @param {Object} args.body
 */
function fetchRequest(args) {
  var _this = this;

  return new Promise(function (resolve, reject) {
    var parsedArgs = (0, _index.removeUndefined)(args);
    try {
      var method = parsedArgs.method,
          path = parsedArgs.path,
          params = parsedArgs.params,
          body = parsedArgs.body;

      var bodyCopy = body;
      var contentType = path.endsWith('msearch') || path.endsWith('bulk') ? 'application/x-ndjson' : 'application/json';
      var headers = Object.assign({}, {
        Accept: 'application/json',
        'Content-Type': contentType
      }, _this.headers);
      var timestamp = Date.now();
      if (_this.credentials) {
        headers.Authorization = 'Basic ' + (0, _index.btoa)(_this.credentials);
      }
      var requestOptions = {
        method: method,
        headers: headers
      };
      if (Array.isArray(bodyCopy)) {
        var arrayBody = '';
        bodyCopy.forEach(function (item) {
          arrayBody += JSON.stringify(item);
          arrayBody += '\n';
        });

        bodyCopy = arrayBody;
      } else {
        bodyCopy = JSON.stringify(bodyCopy) || {};
      }

      if (Object.keys(bodyCopy).length !== 0) {
        requestOptions.body = bodyCopy;
      }

      var finalRequest = requestOptions;
      if (_this.transformRequest) {
        finalRequest = _this.transformRequest(requestOptions);
      }
      var responseHeaders = {};
      return (0, _crossFetch2.default)(_this.protocol + '://' + _this.url + '/' + _this.app + '/' + path + '?' + _querystring2.default.stringify(params), finalRequest).then(function (res) {
        if (res.status >= 500) {
          return reject(res);
        }
        responseHeaders = res.headers;
        return res.json().then(function (data) {
          if (res.status >= 400) {
            return reject(res);
          }
          if (data && data.responses instanceof Array) {
            var allResponses = data.responses.length;
            var errorResponses = data.responses.filter(function (entry) {
              return Object.prototype.hasOwnProperty.call(entry, 'error');
            }).length;
            // reject only when all responses has error
            if (allResponses === errorResponses) {
              return reject(data);
            }
          }
          var response = Object.assign({}, data, {
            _timestamp: timestamp,
            _headers: responseHeaders
          });
          return resolve(response);
        });
      }).catch(function (e) {
        return reject(e);
      });
    } catch (e) {
      return reject(e);
    }
  });
}
exports.default = fetchRequest;