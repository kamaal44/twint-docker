'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _index = require('../../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WebSocket = typeof window !== 'undefined' ? window.WebSocket : require('ws');

/**
 * To connect a web socket
 * @param {Object} args
 * @param {String} args.method
 * @param {String} args.path
 * @param {Object} args.params
 * @param {Object} args.body
 */
function wsRequest(args, onData, onError, onClose) {
  var _this = this;

  try {
    var parsedArgs = (0, _index.removeUndefined)(args);
    var method = parsedArgs.method,
        path = parsedArgs.path,
        params = parsedArgs.params;

    var bodyCopy = args.body;
    if (!bodyCopy || (typeof bodyCopy === 'undefined' ? 'undefined' : _typeof(bodyCopy)) !== 'object') {
      bodyCopy = {};
    }
    var init = function init() {
      _this.ws = new WebSocket('wss://' + _this.url + '/' + _this.app);
      _this.id = (0, _index.uuidv4)();

      _this.request = {
        id: _this.id,
        path: _this.app + '/' + path + '?' + _querystring2.default.stringify(params),
        method: method,
        body: bodyCopy
      };
      if (_this.credentials) {
        _this.request.authorization = 'Basic ' + (0, _index.btoa)(_this.credentials);
      }
      _this.result = {};
      _this.closeHandler = function () {
        _this.wsClosed();
      };
      _this.errorHandler = function (err) {
        _this.processError.apply(_this, [err]);
      };
      _this.messageHandler = function (message) {
        var dataObj = JSON.parse(message.data);
        if (dataObj.body && dataObj.body.status >= 400) {
          _this.processError.apply(_this, [dataObj]);
        } else {
          _this.processMessage.apply(_this, [dataObj]);
        }
      };
      _this.send = function (request) {
        (0, _index.waitForSocketConnection)(_this.ws, function () {
          try {
            _this.ws.send(JSON.stringify(request));
          } catch (e) {
            console.warn(e);
          }
        });
      };
      _this.ws.onmessage = _this.messageHandler;
      _this.ws.onerror = _this.errorHandler;
      _this.ws.onclose = _this.closeHandler;
      _this.send(_this.request);
      _this.result.stop = _this.stop;
      _this.result.reconnect = _this.reconnect;

      return _this.result;
    };
    this.wsClosed = function () {
      if (onClose) {
        onClose();
      }
    };
    this.stop = function () {
      _this.ws.onmessage = undefined;
      _this.ws.onclose = undefined;
      _this.ws.onerror = undefined;
      _this.wsClosed();
      var unsubRequest = JSON.parse(JSON.stringify(_this.request));
      unsubRequest.unsubscribe = true;

      if (_this.unsubscribed !== true) {
        _this.send(unsubRequest);
      }

      _this.unsubscribed = true;
    };
    this.reconnect = function () {
      _this.stop();
      return wsRequest(args, onData, onError, onClose);
    };
    this.processError = function (err) {
      if (onError) {
        onError(err);
      } else {
        console.warn(err);
      }
    };

    this.processMessage = function (origDataObj) {
      var dataObj = JSON.parse(JSON.stringify(origDataObj));
      if (!dataObj.id && dataObj.message) {
        if (onError) {
          onError(dataObj);
        }
        return;
      }

      if (dataObj.id === _this.id) {
        if (dataObj.message) {
          delete dataObj.id;
          if (onError) {
            onError(dataObj);
          }
          return;
        }

        if (dataObj.query_id) {
          _this.query_id = dataObj.query_id;
        }

        if (dataObj.channel) {
          _this.channel = dataObj.channel;
        }

        if (dataObj.body && dataObj.body !== '') {
          if (onData) {
            onData(dataObj.body);
          }
        }

        return;
      }

      if (!dataObj.id && dataObj.channel && dataObj.channel === _this.channel) {
        if (onData) {
          onData(dataObj.event);
        }
      }
    };
    return init();
  } catch (e) {
    if (onError) {
      onError(e);
    } else {
      console.warn(e);
    }
    return null;
  }
}
exports.default = wsRequest;