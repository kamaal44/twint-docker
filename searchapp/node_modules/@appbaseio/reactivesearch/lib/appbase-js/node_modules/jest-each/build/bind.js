'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _util;

function _load_util() {
  return _util = _interopRequireDefault(require('util'));
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _prettyFormat;

function _load_prettyFormat() {
  return _prettyFormat = _interopRequireDefault(require('pretty-format'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toArray(arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}
/**
 * Copyright (c) 2018-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var EXPECTED_COLOR = (_chalk || _load_chalk()).default.green;
var RECEIVED_COLOR = (_chalk || _load_chalk()).default.red;
var SUPPORTED_PLACEHOLDERS = /%[sdifjoOp%]/g;
var PRETTY_PLACEHOLDER = '%p';
var INDEX_PLACEHOLDER = '%#';

exports.default = function (cb) {
  var supportsDone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return function eachBind(title, test, timeout) {
      if (args.length === 1) {
        var _table = args[0].every(Array.isArray) ? args[0] : args[0].map(function (entry) {
          return [entry];
        });
        return _table.forEach(function (row, i) {
          return cb(arrayFormat.apply(undefined, [title, i].concat(_toConsumableArray(row))), applyRestParams(supportsDone, row, test), timeout);
        });
      }

      var templateStrings = args[0];
      var data = args.slice(1);

      var keys = getHeadingKeys(templateStrings[0]);
      var table = buildTable(data, keys.length, keys);

      var missingData = data.length % keys.length;

      if (missingData > 0) {
        var error = new Error('Not enough arguments supplied for given headings:\n' + EXPECTED_COLOR(keys.join(' | ')) + '\n\n' + 'Received:\n' + RECEIVED_COLOR((0, (_prettyFormat || _load_prettyFormat()).default)(data)) + '\n\n' + ('Missing ' + RECEIVED_COLOR(missingData.toString()) + ' ' + pluralize('argument', missingData)));

        if (Error.captureStackTrace) {
          Error.captureStackTrace(error, eachBind);
        }

        return cb(title, function () {
          throw error;
        });
      }

      return table.forEach(function (row) {
        return cb(interpolate(title, row), applyObjectParams(supportsDone, row, test), timeout);
      });
    };
  };
};

var getPrettyIndexes = function getPrettyIndexes(placeholders) {
  return placeholders.reduce(function (indexes, placeholder, index) {
    return placeholder === PRETTY_PLACEHOLDER ? indexes.concat(index) : indexes;
  }, []);
};

var arrayFormat = function arrayFormat(title, rowIndex) {
  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  var placeholders = title.match(SUPPORTED_PLACEHOLDERS) || [];
  var prettyIndexes = getPrettyIndexes(placeholders);

  var _args$reduce = args.reduce(function (acc, arg, index) {
    if (prettyIndexes.indexOf(index) !== -1) {
      return {
        args: acc.args,
        title: acc.title.replace(PRETTY_PLACEHOLDER, (0, (_prettyFormat || _load_prettyFormat()).default)(arg, {
          maxDepth: 1,
          min: true
        }))
      };
    }

    return {
      args: acc.args.concat([arg]),
      title: acc.title
    };
  }, { args: [], title: title });

  var prettyTitle = _args$reduce.title,
      remainingArgs = _args$reduce.args;

  return (_util || _load_util()).default.format.apply((_util || _load_util()).default, [prettyTitle.replace(INDEX_PLACEHOLDER, rowIndex.toString())].concat(_toConsumableArray(remainingArgs.slice(0, placeholders.length - prettyIndexes.length))));
};

var applyRestParams = function applyRestParams(supportsDone, params, test) {
  return supportsDone && params.length < test.length ? function (done) {
    return test.apply(undefined, _toConsumableArray(params).concat([done]));
  } : function () {
    return test.apply(undefined, _toConsumableArray(params));
  };
};

var getHeadingKeys = function getHeadingKeys(headings) {
  return headings.replace(/\s/g, '').split('|');
};

var buildTable = function buildTable(data, rowSize, keys) {
  return Array.from({ length: data.length / rowSize }).map(function (_, index) {
    return data.slice(index * rowSize, index * rowSize + rowSize);
  }).map(function (row) {
    return row.reduce(function (acc, value, index) {
      return Object.assign({}, acc, _defineProperty({}, keys[index], value));
    }, {});
  });
};

var getMatchingKeyPaths = function getMatchingKeyPaths(title) {
  return function (matches, key) {
    return matches.concat(title.match(new RegExp('\\$' + key + '[\\.\\w]*', 'g')) || []);
  };
};

var replaceKeyPathWithValue = function replaceKeyPathWithValue(data) {
  return function (title, match) {
    var keyPath = match.replace('$', '').split('.');
    var value = getPath(data, keyPath);
    return title.replace(match, (0, (_prettyFormat || _load_prettyFormat()).default)(value, {
      maxDepth: 1,
      min: true
    }));
  };
};

var interpolate = function interpolate(title, data) {
  return Object.keys(data).reduce(getMatchingKeyPaths(title), []) // aka flatMap
  .reduce(replaceKeyPathWithValue(data), title);
};

var applyObjectParams = function applyObjectParams(supportsDone, obj, test) {
  return supportsDone && test.length > 1 ? function (done) {
    return test(obj, done);
  } : function () {
    return test(obj);
  };
};

var pluralize = function pluralize(word, count) {
  return word + (count === 1 ? '' : 's');
};

var getPath = function getPath(o, _ref) {
  var _ref2 = _toArray(_ref);

  var head = _ref2[0],
      tail = _ref2.slice(1);

  if (!head || !o.hasOwnProperty || !o.hasOwnProperty(head)) return o;
  return getPath(o[head], tail);
};