'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _jestMessageUtil = require('jest-message-util');

// Try getting the real promise object from the context, if available. Someone
// could have overridden it in a test.
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var Promise = global[Symbol.for('jest-native-promise')] || global.Promise;

var Jasmine2Reporter = function () {
  function Jasmine2Reporter(globalConfig, config, testPath) {
    var _this = this;

    _classCallCheck(this, Jasmine2Reporter);

    this._globalConfig = globalConfig;
    this._config = config;
    this._testPath = testPath;
    this._testResults = [];
    this._currentSuites = [];
    this._resolve = null;
    this._resultsPromise = new Promise(function (resolve) {
      return _this._resolve = resolve;
    });
    this._startTimes = new Map();
  }

  _createClass(Jasmine2Reporter, [{
    key: 'specStarted',
    value: function specStarted(spec) {
      this._startTimes.set(spec.id, Date.now());
    }
  }, {
    key: 'specDone',
    value: function specDone(result) {
      this._testResults.push(this._extractSpecResults(result, this._currentSuites.slice(0)));
    }
  }, {
    key: 'suiteStarted',
    value: function suiteStarted(suite) {
      this._currentSuites.push(suite.description);
    }
  }, {
    key: 'suiteDone',
    value: function suiteDone() {
      this._currentSuites.pop();
    }
  }, {
    key: 'jasmineDone',
    value: function jasmineDone() {
      var numFailingTests = 0;
      var numPassingTests = 0;
      var numPendingTests = 0;
      var testResults = this._testResults;
      testResults.forEach(function (testResult) {
        if (testResult.status === 'failed') {
          numFailingTests++;
        } else if (testResult.status === 'pending') {
          numPendingTests++;
        } else {
          numPassingTests++;
        }
      });

      var testResult = {
        console: null,
        failureMessage: (0, _jestMessageUtil.formatResultsErrors)(testResults, this._config, this._globalConfig, this._testPath),
        numFailingTests: numFailingTests,
        numPassingTests: numPassingTests,
        numPendingTests: numPendingTests,
        perfStats: {
          end: 0,
          start: 0
        },
        snapshot: {
          added: 0,
          fileDeleted: false,
          matched: 0,
          unchecked: 0,
          unmatched: 0,
          updated: 0
        },
        testFilePath: this._testPath,
        testResults: testResults
      };

      this._resolve(testResult);
    }
  }, {
    key: 'getResults',
    value: function getResults() {
      return this._resultsPromise;
    }
  }, {
    key: '_addMissingMessageToStack',
    value: function _addMissingMessageToStack(stack, message) {
      // Some errors (e.g. Angular injection error) don't prepend error.message
      // to stack, instead the first line of the stack is just plain 'Error'
      var ERROR_REGEX = /^Error\s*\n/;
      if (stack && message && ERROR_REGEX.test(stack) && stack.indexOf(message) === -1) {
        return message + stack.replace(ERROR_REGEX, '\n');
      }
      return stack;
    }
  }, {
    key: '_extractSpecResults',
    value: function _extractSpecResults(specResult, ancestorTitles) {
      var _this2 = this;

      var start = this._startTimes.get(specResult.id);
      var duration = start ? Date.now() - start : undefined;
      var status = specResult.status === 'disabled' ? 'pending' : specResult.status;
      var location = specResult.__callsite ? {
        column: specResult.__callsite.getColumnNumber(),
        // $FlowFixMe: https://github.com/facebook/flow/issues/5213
        line: specResult.__callsite.getLineNumber()
      } : null;
      var results = {
        ancestorTitles: ancestorTitles,
        duration: duration,
        failureMessages: [],
        fullName: specResult.fullName,
        location: location,
        numPassingAsserts: 0, // Jasmine2 only returns an array of failed asserts.
        status: status,
        title: specResult.description
      };

      specResult.failedExpectations.forEach(function (failed) {
        var message = !failed.matcherName && failed.stack ? _this2._addMissingMessageToStack(failed.stack, failed.message) : failed.message || '';
        results.failureMessages.push(message);
      });

      return results;
    }
  }]);

  return Jasmine2Reporter;
}();

exports.default = Jasmine2Reporter;