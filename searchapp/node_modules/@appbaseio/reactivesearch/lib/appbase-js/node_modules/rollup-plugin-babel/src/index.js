'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = babel;

var _path = require('path');

var _babelCore = require('babel-core');

var _rollupPluginutils = require('rollup-pluginutils');

var _preflightCheck = require('./preflightCheck.js');

var _preflightCheck2 = _interopRequireDefault(_preflightCheck);

var _utils = require('./utils.js');

var _constants = require('./constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keywordHelpers = ['typeof', 'extends', 'instanceof'];

function babel(options) {
	options = Object.assign({}, options || {});
	var inlineHelpers = {};

	var filter = (0, _rollupPluginutils.createFilter)(options.include, options.exclude);
	var preflightCheck = (0, _preflightCheck2.default)();
	delete options.include;
	delete options.exclude;

	if (options.sourceMap !== false) options.sourceMaps = true;
	if (options.sourceMaps !== false) options.sourceMaps = true;
	delete options.sourceMap;

	var runtimeHelpers = options.runtimeHelpers;
	delete options.runtimeHelpers;

	var externalHelpers = void 0;
	if (options.externalHelpers) externalHelpers = true;
	delete options.externalHelpers;

	var externalHelpersWhitelist = null;
	if (options.externalHelpersWhitelist) externalHelpersWhitelist = options.externalHelpersWhitelist;
	delete options.externalHelpersWhitelist;

	var warn = function warn(msg) {
		return console.warn(msg);
	}; // eslint-disable-line no-console

	return {
		name: 'babel',

		options: function options(_options) {
			warn = _options.onwarn || warn;
		},
		resolveId: function resolveId(id) {
			if (id === _constants.HELPERS) return id;
		},
		load: function load(id) {
			if (id === _constants.HELPERS) {
				var pattern = new RegExp('babelHelpers\\.(' + keywordHelpers.join('|') + ')', 'g');

				var helpers = (0, _babelCore.buildExternalHelpers)(externalHelpersWhitelist, 'var').replace(/^var babelHelpers = \{\};\n/gm, '').replace(/\nbabelHelpers;$/gm, '').replace(pattern, 'var _$1').replace(/^babelHelpers\./gm, 'export var ') + ('\n\nexport { ' + keywordHelpers.map(function (word) {
					return '_' + word + ' as ' + word;
				}).join(', ') + ' }');

				return helpers;
			}
		},
		transform: function transform(code, id) {
			if (!filter(id)) return null;
			if (id === _constants.HELPERS) return null;

			var helpers = preflightCheck(options, (0, _path.dirname)(id));
			var localOpts = Object.assign({ filename: id }, options);

			var transformed = (0, _babelCore.transform)(code, localOpts);
			var usedHelpers = transformed.metadata.usedHelpers;


			if (usedHelpers.length) {
				if (helpers === _constants.BUNDLED) {
					if (!externalHelpers) {
						transformed.code += '\n\nimport * as babelHelpers from \'' + _constants.HELPERS + '\';';
					}
				} else if (helpers === _constants.RUNTIME) {
					if (!runtimeHelpers) {
						throw new Error('Runtime helpers are not enabled. Either exclude the transform-runtime Babel plugin or pass the `runtimeHelpers: true` option. See https://github.com/rollup/rollup-plugin-babel#configuring-babel for more information');
					}
				} else {
					usedHelpers.forEach(function (helper) {
						if (inlineHelpers[helper]) {
							(0, _utils.warnOnce)(warn, 'The \'' + helper + '\' Babel helper is used more than once in your code. It\'s strongly recommended that you use the "external-helpers" plugin or the "es2015-rollup" preset. See https://github.com/rollup/rollup-plugin-babel#configuring-babel for more information');
						}

						inlineHelpers[helper] = true;
					});
				}
			}

			return {
				code: transformed.code,
				map: transformed.map
			};
		}
	};
}