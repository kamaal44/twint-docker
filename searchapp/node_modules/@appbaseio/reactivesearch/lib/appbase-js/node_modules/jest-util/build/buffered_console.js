'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _assert;

function _load_assert() {
  return _assert = _interopRequireDefault(require('assert'));
}

var _console;

function _load_console() {
  return _console = require('console');
}

var _util;

function _load_util() {
  return _util = require('util');
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _get_callsite;

function _load_get_callsite() {
  return _get_callsite = _interopRequireDefault(require('./get_callsite'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var BufferedConsole = function (_Console) {
  _inherits(BufferedConsole, _Console);

  function BufferedConsole(getSourceMaps) {
    _classCallCheck(this, BufferedConsole);

    var buffer = [];

    var _this = _possibleConstructorReturn(this, (BufferedConsole.__proto__ || Object.getPrototypeOf(BufferedConsole)).call(this, {
      write: function write(message) {
        return BufferedConsole.write(buffer, 'log', message, null, getSourceMaps());
      }
    }));

    _this._getSourceMaps = getSourceMaps;
    _this._buffer = buffer;
    _this._counters = {};
    _this._timers = {};
    _this._groupDepth = 0;
    return _this;
  }

  _createClass(BufferedConsole, [{
    key: '_log',
    value: function _log(type, message) {
      BufferedConsole.write(this._buffer, type, '  '.repeat(this._groupDepth) + message, 3, this._getSourceMaps());
    }
  }, {
    key: 'assert',
    value: function assert() {
      try {
        (_assert || _load_assert()).default.apply(undefined, arguments);
      } catch (error) {
        this._log('assert', error.toString());
      }
    }
  }, {
    key: 'count',
    value: function count() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      if (!this._counters[label]) {
        this._counters[label] = 0;
      }

      this._log('count', (0, (_util || _load_util()).format)(label + ': ' + ++this._counters[label]));
    }
  }, {
    key: 'countReset',
    value: function countReset() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      this._counters[label] = 0;
    }
  }, {
    key: 'debug',
    value: function debug() {
      this._log('debug', (_util || _load_util()).format.apply(undefined, arguments));
    }
  }, {
    key: 'dir',
    value: function dir() {
      this._log('dir', (_util || _load_util()).format.apply(undefined, arguments));
    }
  }, {
    key: 'dirxml',
    value: function dirxml() {
      this._log('dirxml', (_util || _load_util()).format.apply(undefined, arguments));
    }
  }, {
    key: 'error',
    value: function error() {
      this._log('error', (_util || _load_util()).format.apply(undefined, arguments));
    }
  }, {
    key: 'group',
    value: function group() {
      this._groupDepth++;

      if (arguments.length > 0) {
        this._log('group', (_chalk || _load_chalk()).default.bold((_util || _load_util()).format.apply(undefined, arguments)));
      }
    }
  }, {
    key: 'groupCollapsed',
    value: function groupCollapsed() {
      this._groupDepth++;

      if (arguments.length > 0) {
        this._log('groupCollapsed', (_chalk || _load_chalk()).default.bold((_util || _load_util()).format.apply(undefined, arguments)));
      }
    }
  }, {
    key: 'groupEnd',
    value: function groupEnd() {
      if (this._groupDepth > 0) {
        this._groupDepth--;
      }
    }
  }, {
    key: 'info',
    value: function info() {
      this._log('info', (_util || _load_util()).format.apply(undefined, arguments));
    }
  }, {
    key: 'log',
    value: function log() {
      this._log('log', (_util || _load_util()).format.apply(undefined, arguments));
    }
  }, {
    key: 'time',
    value: function time() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      if (this._timers[label]) {
        return;
      }

      this._timers[label] = new Date();
    }
  }, {
    key: 'timeEnd',
    value: function timeEnd() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      var startTime = this._timers[label];

      if (startTime) {
        var endTime = new Date();
        var time = endTime - startTime;
        this._log('time', (0, (_util || _load_util()).format)(label + ': ' + time + 'ms'));
        delete this._timers[label];
      }
    }
  }, {
    key: 'warn',
    value: function warn() {
      this._log('warn', (_util || _load_util()).format.apply(undefined, arguments));
    }
  }, {
    key: 'getBuffer',
    value: function getBuffer() {
      return this._buffer;
    }
  }], [{
    key: 'write',
    value: function write(buffer, type, message, level, sourceMaps) {
      var callsite = (0, (_get_callsite || _load_get_callsite()).default)(level != null ? level : 2, sourceMaps);
      var origin = callsite.getFileName() + ':' + callsite.getLineNumber();

      buffer.push({
        message: message,
        origin: origin,
        type: type
      });

      return buffer;
    }
  }]);

  return BufferedConsole;
}((_console || _load_console()).Console);

exports.default = BufferedConsole;
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */