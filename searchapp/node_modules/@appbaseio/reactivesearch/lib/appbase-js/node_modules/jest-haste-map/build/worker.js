'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getSha1 = exports.worker = undefined;

var worker = exports.worker = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
    var content, dependencies, id, module, sha1, computeDependencies, computeSha1, filePath, getContent, fileData, doc;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(data.hasteImplModulePath && data.hasteImplModulePath !== hasteImplModulePath)) {
              _context.next = 5;
              break;
            }

            if (!hasteImpl) {
              _context.next = 3;
              break;
            }

            throw new Error('jest-haste-map: hasteImplModulePath changed');

          case 3:
            hasteImplModulePath = data.hasteImplModulePath;
            // $FlowFixMe: dynamic require
            hasteImpl = require(hasteImplModulePath);

          case 5:
            content = void 0;
            dependencies = void 0;
            id = void 0;
            module = void 0;
            sha1 = void 0;
            computeDependencies = data.computeDependencies, computeSha1 = data.computeSha1, filePath = data.filePath;

            getContent = function getContent() {
              if (content === undefined) {
                content = (_gracefulFs || _load_gracefulFs()).default.readFileSync(filePath, 'utf8');
              }

              return content;
            };

            if (!filePath.endsWith(PACKAGE_JSON)) {
              _context.next = 23;
              break;
            }

            _context.prev = 13;
            fileData = JSON.parse(getContent());


            if (fileData.name) {
              id = fileData.name;
              module = [filePath, (_constants || _load_constants()).default.PACKAGE];
            }
            _context.next = 21;
            break;

          case 18:
            _context.prev = 18;
            _context.t0 = _context['catch'](13);
            throw new Error('Cannot parse ' + filePath + ' as JSON: ' + _context.t0.message);

          case 21:
            _context.next = 24;
            break;

          case 23:
            if (!(_blacklist || _load_blacklist()).default.has(filePath.substr(filePath.lastIndexOf('.')))) {
              // Process a random file that is returned as a MODULE.
              if (hasteImpl) {
                id = hasteImpl.getHasteName(filePath);
              } else {
                doc = (_jestDocblock || _load_jestDocblock()).parse((_jestDocblock || _load_jestDocblock()).extract(getContent()));

                id = [].concat(doc.providesModule || doc.provides)[0];
              }

              if (computeDependencies) {
                dependencies = (0, (_extract_requires || _load_extract_requires()).default)(getContent());
              }

              if (id) {
                module = [filePath, (_constants || _load_constants()).default.MODULE];
              }
            }

          case 24:
            // If a SHA-1 is requested on update, compute it.
            if (computeSha1) {
              sha1 = sha1hex(getContent() || (_gracefulFs || _load_gracefulFs()).default.readFileSync(filePath));
            }

            return _context.abrupt('return', { dependencies: dependencies, id: id, module: module, sha1: sha1 });

          case 26:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[13, 18]]);
  }));

  return function worker(_x) {
    return _ref.apply(this, arguments);
  };
}();

var getSha1 = exports.getSha1 = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {
    var sha1;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            sha1 = data.computeSha1 ? sha1hex((_gracefulFs || _load_gracefulFs()).default.readFileSync(data.filePath)) : null;
            return _context2.abrupt('return', {
              dependencies: undefined,
              id: undefined,
              module: undefined,
              sha1: sha1
            });

          case 2:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getSha1(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _crypto;

function _load_crypto() {
  return _crypto = _interopRequireDefault(require('crypto'));
}

var _path;

function _load_path() {
  return _path = _interopRequireDefault(require('path'));
}

var _jestDocblock;

function _load_jestDocblock() {
  return _jestDocblock = _interopRequireWildcard(require('jest-docblock'));
}

var _gracefulFs;

function _load_gracefulFs() {
  return _gracefulFs = _interopRequireDefault(require('graceful-fs'));
}

var _blacklist;

function _load_blacklist() {
  return _blacklist = _interopRequireDefault(require('./blacklist'));
}

var _constants;

function _load_constants() {
  return _constants = _interopRequireDefault(require('./constants'));
}

var _extract_requires;

function _load_extract_requires() {
  return _extract_requires = _interopRequireDefault(require('./lib/extract_requires'));
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }
    newObj.default = obj;
    return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step('next', value);
          }, function (err) {
            step('throw', err);
          });
        }
      }
      return step('next');
    });
  };
}
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var PACKAGE_JSON = (_path || _load_path()).default.sep + 'package.json';

var hasteImpl = null;
var hasteImplModulePath = null;

function sha1hex(content) {
  return (_crypto || _load_crypto()).default.createHash('sha1').update(content).digest('hex');
}