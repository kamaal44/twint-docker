'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path;

function _load_path() {
  return _path = _interopRequireDefault(require('path'));
}

var _micromatch;

function _load_micromatch() {
  return _micromatch = _interopRequireDefault(require('micromatch'));
}

var _constants;

function _load_constants() {
  return _constants = _interopRequireDefault(require('./constants'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var HasteFS = function () {
  function HasteFS(files) {
    _classCallCheck(this, HasteFS);

    this._files = files;
  }

  _createClass(HasteFS, [{
    key: 'getModuleName',
    value: function getModuleName(file) {
      return this._files[file] && this._files[file][(_constants || _load_constants()).default.ID] || null;
    }
  }, {
    key: 'getDependencies',
    value: function getDependencies(file) {
      return this._files[file] && this._files[file][(_constants || _load_constants()).default.DEPENDENCIES] || null;
    }
  }, {
    key: 'getSha1',
    value: function getSha1(file) {
      return this._files[file] && this._files[file][(_constants || _load_constants()).default.SHA1] || null;
    }
  }, {
    key: 'exists',
    value: function exists(file) {
      return !!this._files[file];
    }
  }, {
    key: 'getAllFiles',
    value: function getAllFiles() {
      return Object.keys(this._files);
    }
  }, {
    key: 'matchFiles',
    value: function matchFiles(pattern) {
      if (!(pattern instanceof RegExp)) {
        pattern = new RegExp(pattern);
      }
      var files = [];
      for (var file in this._files) {
        if (pattern.test(file)) {
          files.push(file);
        }
      }
      return files;
    }
  }, {
    key: 'matchFilesWithGlob',
    value: function matchFilesWithGlob(globs, root) {
      var files = new Set();
      for (var file in this._files) {
        var filePath = root ? (_path || _load_path()).default.relative(root, file) : file;
        if ((0, (_micromatch || _load_micromatch()).default)([filePath], globs).length) {
          files.add(file);
        }
      }
      return files;
    }
  }]);

  return HasteFS;
}();

exports.default = HasteFS;
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */