'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _ansiEscapes;

function _load_ansiEscapes() {
  return _ansiEscapes = _interopRequireDefault(require('ansi-escapes'));
}

var _jestWatcher;

function _load_jestWatcher() {
  return _jestWatcher = require('jest-watcher');
}

var _utils;

function _load_utils() {
  return _utils = require('./reporters/utils');
}

var _constants;

function _load_constants() {
  return _constants = require('./constants');
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 *
 */

var SnapshotInteractiveMode = function () {
  function SnapshotInteractiveMode(pipe) {
    _classCallCheck(this, SnapshotInteractiveMode);

    this._pipe = pipe;
    this._isActive = false;
    this._skippedNum = 0;
  }

  _createClass(SnapshotInteractiveMode, [{
    key: 'isActive',
    value: function isActive() {
      return this._isActive;
    }
  }, {
    key: 'getSkippedNum',
    value: function getSkippedNum() {
      return this._skippedNum;
    }
  }, {
    key: '_clearTestSummary',
    value: function _clearTestSummary() {
      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.cursorUp(6));
      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.eraseDown);
    }
  }, {
    key: '_drawUIProgress',
    value: function _drawUIProgress() {
      this._clearTestSummary();
      var numPass = this._countPaths - this._testAssertions.length;
      var numRemaining = this._countPaths - numPass - this._skippedNum;

      var stats = (_chalk || _load_chalk()).default.bold.dim((0, (_utils || _load_utils()).pluralize)('snapshot', numRemaining) + ' remaining');
      if (numPass) {
        stats += ', ' + (_chalk || _load_chalk()).default.bold.green((0, (_utils || _load_utils()).pluralize)('snapshot', numPass) + ' updated');
      }
      if (this._skippedNum) {
        stats += ', ' + (_chalk || _load_chalk()).default.bold.yellow((0, (_utils || _load_utils()).pluralize)('snapshot', this._skippedNum) + ' skipped');
      }
      var messages = ['\n' + (_chalk || _load_chalk()).default.bold('Interactive Snapshot Progress'), (_constants || _load_constants()).ARROW + stats, '\n' + (_chalk || _load_chalk()).default.bold('Watch Usage'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'u' + (_chalk || _load_chalk()).default.dim(' to update failing snapshots for this test.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 's' + (_chalk || _load_chalk()).default.dim(' to skip the current test.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'q' + (_chalk || _load_chalk()).default.dim(' to quit Interactive Snapshot Mode.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'Enter' + (_chalk || _load_chalk()).default.dim(' to trigger a test run.')];

      this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
    }
  }, {
    key: '_drawUIDoneWithSkipped',
    value: function _drawUIDoneWithSkipped() {
      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.clearScreen);
      var numPass = this._countPaths - this._testAssertions.length;

      var stats = (_chalk || _load_chalk()).default.bold.dim((0, (_utils || _load_utils()).pluralize)('snapshot', this._countPaths) + ' reviewed');
      if (numPass) {
        stats += ', ' + (_chalk || _load_chalk()).default.bold.green((0, (_utils || _load_utils()).pluralize)('snapshot', numPass) + ' updated');
      }
      if (this._skippedNum) {
        stats += ', ' + (_chalk || _load_chalk()).default.bold.yellow((0, (_utils || _load_utils()).pluralize)('snapshot', this._skippedNum) + ' skipped');
      }
      var messages = ['\n' + (_chalk || _load_chalk()).default.bold('Interactive Snapshot Result'), (_constants || _load_constants()).ARROW + stats, '\n' + (_chalk || _load_chalk()).default.bold('Watch Usage'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'r' + (_chalk || _load_chalk()).default.dim(' to restart Interactive Snapshot Mode.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'q' + (_chalk || _load_chalk()).default.dim(' to quit Interactive Snapshot Mode.')];

      this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
    }
  }, {
    key: '_drawUIDone',
    value: function _drawUIDone() {
      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.clearScreen);
      var numPass = this._countPaths - this._testAssertions.length;

      var stats = (_chalk || _load_chalk()).default.bold.dim((0, (_utils || _load_utils()).pluralize)('snapshot', this._countPaths) + ' reviewed');
      if (numPass) {
        stats += ', ' + (_chalk || _load_chalk()).default.bold.green((0, (_utils || _load_utils()).pluralize)('snapshot', numPass) + ' updated');
      }
      var messages = ['\n' + (_chalk || _load_chalk()).default.bold('Interactive Snapshot Result'), (_constants || _load_constants()).ARROW + stats, '\n' + (_chalk || _load_chalk()).default.bold('Watch Usage'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'Enter' + (_chalk || _load_chalk()).default.dim(' to return to watch mode.')];

      this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
    }
  }, {
    key: '_drawUIOverlay',
    value: function _drawUIOverlay() {
      if (this._testAssertions.length === 0) {
        return this._drawUIDone();
      }

      if (this._testAssertions.length - this._skippedNum === 0) {
        return this._drawUIDoneWithSkipped();
      }

      return this._drawUIProgress();
    }
  }, {
    key: 'put',
    value: function put(key) {
      switch (key) {
        case 's':
          if (this._skippedNum === this._testAssertions.length) break;
          this._skippedNum += 1;

          // move skipped test to the end
          this._testAssertions.push(this._testAssertions.shift());
          if (this._testAssertions.length - this._skippedNum > 0) {
            this._run(false);
          } else {
            this._drawUIDoneWithSkipped();
          }

          break;
        case 'u':
          this._run(true);
          break;
        case 'q':
        case (_jestWatcher || _load_jestWatcher()).KEYS.ESCAPE:
          this.abort();
          break;
        case 'r':
          this.restart();
          break;
        case (_jestWatcher || _load_jestWatcher()).KEYS.ENTER:
          if (this._testAssertions.length === 0) {
            this.abort();
          } else {
            this._run(false);
          }
          break;
        default:
          break;
      }
    }
  }, {
    key: 'abort',
    value: function abort() {
      this._isActive = false;
      this._skippedNum = 0;
      this._updateTestRunnerConfig(null, false);
    }
  }, {
    key: 'restart',
    value: function restart() {
      this._skippedNum = 0;
      this._countPaths = this._testAssertions.length;
      this._run(false);
    }
  }, {
    key: 'updateWithResults',
    value: function updateWithResults(results) {
      var hasSnapshotFailure = !!results.snapshot.failure;
      if (hasSnapshotFailure) {
        this._drawUIOverlay();
        return;
      }

      this._testAssertions.shift();
      if (this._testAssertions.length - this._skippedNum === 0) {
        this._drawUIOverlay();
        return;
      }

      // Go to the next test
      this._run(false);
    }
  }, {
    key: '_run',
    value: function _run(shouldUpdateSnapshot) {
      var testAssertion = this._testAssertions[0];
      this._updateTestRunnerConfig(testAssertion, shouldUpdateSnapshot);
    }
  }, {
    key: 'run',
    value: function run(failedSnapshotTestAssertions, onConfigChange) {
      if (!failedSnapshotTestAssertions.length) {
        return;
      }

      this._testAssertions = [].concat(failedSnapshotTestAssertions);
      this._countPaths = this._testAssertions.length;
      this._updateTestRunnerConfig = onConfigChange;
      this._isActive = true;
      this._run(false);
    }
  }]);

  return SnapshotInteractiveMode;
}();

exports.default = SnapshotInteractiveMode;