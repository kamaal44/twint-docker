'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step('next', value);
          }, function (err) {
            step('throw', err);
          });
        }
      }
      return step('next');
    });
  };
}

/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

var JestHooks = function () {
  function JestHooks() {
    _classCallCheck(this, JestHooks);

    this._listeners = {
      onFileChange: [],
      onTestRunComplete: [],
      shouldRunTestSuite: []
    };
  }

  _createClass(JestHooks, [{
    key: 'isUsed',
    value: function isUsed(hook) {
      return this._listeners[hook] && this._listeners[hook].length;
    }
  }, {
    key: 'getSubscriber',
    value: function getSubscriber() {
      var _this2 = this;

      return {
        onFileChange: function onFileChange(fn) {
          _this2._listeners.onFileChange.push(fn);
        },
        onTestRunComplete: function onTestRunComplete(fn) {
          _this2._listeners.onTestRunComplete.push(fn);
        },
        shouldRunTestSuite: function shouldRunTestSuite(fn) {
          _this2._listeners.shouldRunTestSuite.push(fn);
        }
      };
    }
  }, {
    key: 'getEmitter',
    value: function getEmitter() {
      var _this3 = this;

      var _this = this;

      return {
        onFileChange: function onFileChange(fs) {
          return _this3._listeners.onFileChange.forEach(function (listener) {
            return listener(fs);
          });
        },
        onTestRunComplete: function onTestRunComplete(results) {
          return _this3._listeners.onTestRunComplete.forEach(function (listener) {
            return listener(results);
          });
        },
        shouldRunTestSuite: function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(testSuiteInfo) {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt('return', Promise.all(_this._listeners.shouldRunTestSuite.map(function (listener) {
                      return listener(testSuiteInfo);
                    })).then(function (result) {
                      return result.every(function (shouldRunTestSuite) {
                        return shouldRunTestSuite;
                      });
                    }));

                  case 1:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          return function shouldRunTestSuite(_x) {
            return _ref.apply(this, arguments);
          };
        }()
      };
    }
  }]);

  return JestHooks;
}();

exports.default = JestHooks;