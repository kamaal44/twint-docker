'use strict';

var path = require('path');
var childProcess = require('child_process');
var util = require('util');
var crossSpawn = require('cross-spawn');
var stripEof = require('strip-eof');
var npmRunPath = require('npm-run-path');
var isStream = require('is-stream');
var _getStream = require('get-stream');
var pFinally = require('p-finally');
var onExit = require('signal-exit');
var errname = require('./lib/errname');
var stdio = require('./lib/stdio');

var TEN_MEGABYTES = 1000 * 1000 * 10;

function handleArgs(cmd, args, opts) {
	var parsed = void 0;

	opts = Object.assign({
		extendEnv: true,
		env: {}
	}, opts);

	if (opts.extendEnv) {
		opts.env = Object.assign({}, process.env, opts.env);
	}

	if (opts.__winShell === true) {
		delete opts.__winShell;
		parsed = {
			command: cmd,
			args: args,
			options: opts,
			file: cmd,
			original: cmd
		};
	} else {
		parsed = crossSpawn._parse(cmd, args, opts);
	}

	opts = Object.assign({
		maxBuffer: TEN_MEGABYTES,
		stripEof: true,
		preferLocal: true,
		localDir: parsed.options.cwd || process.cwd(),
		encoding: 'utf8',
		reject: true,
		cleanup: true
	}, parsed.options);

	opts.stdio = stdio(opts);

	if (opts.preferLocal) {
		opts.env = npmRunPath.env(Object.assign({}, opts, { cwd: opts.localDir }));
	}

	if (opts.detached) {
		// #115
		opts.cleanup = false;
	}

	if (process.platform === 'win32' && path.basename(parsed.command) === 'cmd.exe') {
		// #116
		parsed.args.unshift('/q');
	}

	return {
		cmd: parsed.command,
		args: parsed.args,
		opts: opts,
		parsed: parsed
	};
}

function handleInput(spawned, opts) {
	var input = opts.input;

	if (input === null || input === undefined) {
		return;
	}

	if (isStream(input)) {
		input.pipe(spawned.stdin);
	} else {
		spawned.stdin.end(input);
	}
}

function handleOutput(opts, val) {
	if (val && opts.stripEof) {
		val = stripEof(val);
	}

	return val;
}

function handleShell(fn, cmd, opts) {
	var file = '/bin/sh';
	var args = ['-c', cmd];

	opts = Object.assign({}, opts);

	if (process.platform === 'win32') {
		opts.__winShell = true;
		file = process.env.comspec || 'cmd.exe';
		args = ['/s', '/c', '"' + cmd + '"'];
		opts.windowsVerbatimArguments = true;
	}

	if (opts.shell) {
		file = opts.shell;
		delete opts.shell;
	}

	return fn(file, args, opts);
}

function getStream(process, stream, encoding, maxBuffer) {
	if (!process[stream]) {
		return null;
	}

	var ret = void 0;

	if (encoding) {
		ret = _getStream(process[stream], {
			encoding: encoding,
			maxBuffer: maxBuffer
		});
	} else {
		ret = _getStream.buffer(process[stream], { maxBuffer: maxBuffer });
	}

	return ret.catch(function (err) {
		err.stream = stream;
		err.message = stream + ' ' + err.message;
		throw err;
	});
}

function makeError(result, options) {
	var stdout = result.stdout;
	var stderr = result.stderr;

	var err = result.error;
	var code = result.code;
	var signal = result.signal;

	var parsed = options.parsed;
	var joinedCmd = options.joinedCmd;
	var timedOut = options.timedOut || false;

	if (!err) {
		var output = '';

		if (Array.isArray(parsed.opts.stdio)) {
			if (parsed.opts.stdio[2] !== 'inherit') {
				output += output.length > 0 ? stderr : '\n' + stderr;
			}

			if (parsed.opts.stdio[1] !== 'inherit') {
				output += '\n' + stdout;
			}
		} else if (parsed.opts.stdio !== 'inherit') {
			output = '\n' + stderr + stdout;
		}

		err = new Error('Command failed: ' + joinedCmd + output);
		err.code = code < 0 ? errname(code) : code;
	}

	err.stdout = stdout;
	err.stderr = stderr;
	err.failed = true;
	err.signal = signal || null;
	err.cmd = joinedCmd;
	err.timedOut = timedOut;

	return err;
}

function joinCmd(cmd, args) {
	var joinedCmd = cmd;

	if (Array.isArray(args) && args.length > 0) {
		joinedCmd += ' ' + args.join(' ');
	}

	return joinedCmd;
}

module.exports = function (cmd, args, opts) {
	var parsed = handleArgs(cmd, args, opts);
	var encoding = parsed.opts.encoding;
	var maxBuffer = parsed.opts.maxBuffer;
	var joinedCmd = joinCmd(cmd, args);

	var spawned = void 0;
	try {
		spawned = childProcess.spawn(parsed.cmd, parsed.args, parsed.opts);
	} catch (err) {
		return Promise.reject(err);
	}

	var removeExitHandler = void 0;
	if (parsed.opts.cleanup) {
		removeExitHandler = onExit(function () {
			spawned.kill();
		});
	}

	var timeoutId = null;
	var timedOut = false;

	var cleanupTimeout = function cleanupTimeout() {
		if (timeoutId) {
			clearTimeout(timeoutId);
			timeoutId = null;
		}
	};

	if (parsed.opts.timeout > 0) {
		timeoutId = setTimeout(function () {
			timeoutId = null;
			timedOut = true;
			spawned.kill(parsed.opts.killSignal);
		}, parsed.opts.timeout);
	}

	var processDone = new Promise(function (resolve) {
		spawned.on('exit', function (code, signal) {
			cleanupTimeout();
			resolve({ code: code, signal: signal });
		});

		spawned.on('error', function (err) {
			cleanupTimeout();
			resolve({ error: err });
		});

		if (spawned.stdin) {
			spawned.stdin.on('error', function (err) {
				cleanupTimeout();
				resolve({ error: err });
			});
		}
	});

	function destroy() {
		if (spawned.stdout) {
			spawned.stdout.destroy();
		}

		if (spawned.stderr) {
			spawned.stderr.destroy();
		}
	}

	var handlePromise = function handlePromise() {
		return pFinally(Promise.all([processDone, getStream(spawned, 'stdout', encoding, maxBuffer), getStream(spawned, 'stderr', encoding, maxBuffer)]).then(function (arr) {
			var result = arr[0];
			result.stdout = arr[1];
			result.stderr = arr[2];

			if (removeExitHandler) {
				removeExitHandler();
			}

			if (result.error || result.code !== 0 || result.signal !== null) {
				var err = makeError(result, {
					joinedCmd: joinedCmd,
					parsed: parsed,
					timedOut: timedOut
				});

				// TODO: missing some timeout logic for killed
				// https://github.com/nodejs/node/blob/master/lib/child_process.js#L203
				// err.killed = spawned.killed || killed;
				err.killed = err.killed || spawned.killed;

				if (!parsed.opts.reject) {
					return err;
				}

				throw err;
			}

			return {
				stdout: handleOutput(parsed.opts, result.stdout),
				stderr: handleOutput(parsed.opts, result.stderr),
				code: 0,
				failed: false,
				killed: false,
				signal: null,
				cmd: joinedCmd,
				timedOut: false
			};
		}), destroy);
	};

	crossSpawn._enoent.hookChildProcess(spawned, parsed.parsed);

	handleInput(spawned, parsed.opts);

	spawned.then = function (onfulfilled, onrejected) {
		return handlePromise().then(onfulfilled, onrejected);
	};
	spawned.catch = function (onrejected) {
		return handlePromise().catch(onrejected);
	};

	return spawned;
};

module.exports.stdout = function () {
	// TODO: set `stderr: 'ignore'` when that option is implemented
	return module.exports.apply(null, arguments).then(function (x) {
		return x.stdout;
	});
};

module.exports.stderr = function () {
	// TODO: set `stdout: 'ignore'` when that option is implemented
	return module.exports.apply(null, arguments).then(function (x) {
		return x.stderr;
	});
};

module.exports.shell = function (cmd, opts) {
	return handleShell(module.exports, cmd, opts);
};

module.exports.sync = function (cmd, args, opts) {
	var parsed = handleArgs(cmd, args, opts);
	var joinedCmd = joinCmd(cmd, args);

	if (isStream(parsed.opts.input)) {
		throw new TypeError('The `input` option cannot be a stream in sync mode');
	}

	var result = childProcess.spawnSync(parsed.cmd, parsed.args, parsed.opts);
	result.code = result.status;

	if (result.error || result.status !== 0 || result.signal !== null) {
		var err = makeError(result, {
			joinedCmd: joinedCmd,
			parsed: parsed
		});

		if (!parsed.opts.reject) {
			return err;
		}

		throw err;
	}

	return {
		stdout: handleOutput(parsed.opts, result.stdout),
		stderr: handleOutput(parsed.opts, result.stderr),
		code: 0,
		failed: false,
		signal: null,
		cmd: joinedCmd,
		timedOut: false
	};
};

module.exports.shellSync = function (cmd, opts) {
	return handleShell(module.exports.sync, cmd, opts);
};

module.exports.spawn = util.deprecate(module.exports, 'execa.spawn() is deprecated. Use execa() instead.');