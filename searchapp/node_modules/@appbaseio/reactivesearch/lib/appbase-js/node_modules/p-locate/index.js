'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var pLimit = require('p-limit');

var EndError = function (_Error) {
	_inherits(EndError, _Error);

	function EndError(value) {
		_classCallCheck(this, EndError);

		var _this = _possibleConstructorReturn(this, (EndError.__proto__ || Object.getPrototypeOf(EndError)).call(this));

		_this.value = value;
		return _this;
	}

	return EndError;
}(Error);

// the input can also be a promise, so we `Promise.all()` them both


var finder = function finder(el) {
	return Promise.all(el).then(function (val) {
		return val[1] === true && Promise.reject(new EndError(val[0]));
	});
};

module.exports = function (iterable, tester, opts) {
	opts = Object.assign({
		concurrency: Infinity,
		preserveOrder: true
	}, opts);

	var limit = pLimit(opts.concurrency);

	// start all the promises concurrently with optional limit
	var items = Array.from(iterable).map(function (el) {
		return [el, limit(function () {
			return Promise.resolve(el).then(tester);
		})];
	});

	// check the promises either serially or concurrently
	var checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);

	return Promise.all(items.map(function (el) {
		return checkLimit(function () {
			return finder(el);
		});
	})).then(function () {}).catch(function (err) {
		return err instanceof EndError ? err.value : Promise.reject(err);
	});
};