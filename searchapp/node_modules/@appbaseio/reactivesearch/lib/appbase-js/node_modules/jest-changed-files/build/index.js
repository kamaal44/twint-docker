'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.findRepos = exports.getChangedFilesForRoots = undefined;

var _git;

function _load_git() {
  return _git = _interopRequireDefault(require('./git'));
}

var _hg;

function _load_hg() {
  return _hg = _interopRequireDefault(require('./hg'));
}

var _throat;

function _load_throat() {
  return _throat = _interopRequireDefault(require('throat'));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step('next', value);
          }, function (err) {
            step('throw', err);
          });
        }
      }
      return step('next');
    });
  };
}
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

// This is an arbitrary number. The main goal is to prevent projects with
// many roots (50+) from spawning too many processes at once.
var mutex = (0, (_throat || _load_throat()).default)(5);

var findGitRoot = function findGitRoot(dir) {
  return mutex(function () {
    return (_git || _load_git()).default.getRoot(dir);
  });
};
var findHgRoot = function findHgRoot(dir) {
  return mutex(function () {
    return (_hg || _load_hg()).default.getRoot(dir);
  });
};

var getChangedFilesForRoots = exports.getChangedFilesForRoots = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(roots, options) {
    var repos, changedFilesOptions, gitPromises, hgPromises, changedFiles;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return findRepos(roots);

          case 2:
            repos = _context.sent;
            changedFilesOptions = Object.assign({}, { includePaths: roots }, options);
            gitPromises = Array.from(repos.git).map(function (repo) {
              return (_git || _load_git()).default.findChangedFiles(repo, changedFilesOptions);
            });
            hgPromises = Array.from(repos.hg).map(function (repo) {
              return (_hg || _load_hg()).default.findChangedFiles(repo, changedFilesOptions);
            });
            _context.next = 8;
            return Promise.all(gitPromises.concat(hgPromises));

          case 8:
            _context.t0 = function (allFiles, changedFilesInTheRepo) {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = changedFilesInTheRepo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var file = _step.value;

                  allFiles.add(file);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return allFiles;
            };

            _context.t1 = new Set();
            changedFiles = _context.sent.reduce(_context.t0, _context.t1);
            return _context.abrupt('return', { changedFiles: changedFiles, repos: repos });

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getChangedFilesForRoots(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var findRepos = exports.findRepos = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(roots) {
    var gitRepos, hgRepos;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return Promise.all(roots.reduce(function (promises, root) {
              return promises.concat(findGitRoot(root));
            }, []));

          case 2:
            gitRepos = _context2.sent;
            _context2.next = 5;
            return Promise.all(roots.reduce(function (promises, root) {
              return promises.concat(findHgRoot(root));
            }, []));

          case 5:
            hgRepos = _context2.sent;
            return _context2.abrupt('return', {
              git: new Set(gitRepos.filter(Boolean)),
              hg: new Set(hgRepos.filter(Boolean))
            });

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function findRepos(_x3) {
    return _ref2.apply(this, arguments);
  };
}();