'use strict';

var _ = require('lodash');

var pkgInfo = require('./pkgInfo');

module.exports = function (cmds, config) {
    config = config || {};

    var names = (config.names || '').split(config.nameSeparator || ',');
    var prefixColors = config.prefixColors ? config.prefixColors.split(',') : [];

    cmds = cmds.map(stripCmdQuotes);

    cmds = cmds.map(function (cmd, idx) {
        return {
            cmd: cmd,
            name: names[idx] || ''
        };
    });

    cmds = _.flatMap(cmds, expandCmdShortcuts);

    return cmds.map(function (cmd, idx) {
        return Object.assign(cmd, {
            color: prefixColors[idx]
        });
    });
};

function stripCmdQuotes(cmd) {
    // Removes the quotes surrounding a command.
    if (cmd[0] === '"' || cmd[0] === '\'') {
        return cmd.substr(1, cmd.length - 2);
    } else {
        return cmd;
    }
}

function expandCmdShortcuts(cmd) {
    var shortcut = cmd.cmd.match(/^npm:(\S+)(.*)/);
    if (shortcut) {
        var cmdName = shortcut[1];
        var args = shortcut[2];

        var wildcard = cmdName.indexOf('*');
        if (wildcard >= 0) {
            return expandNpmWildcard(cmd, cmdName, wildcard, args);
        }

        if (!cmd.name) {
            cmd.name = cmdName;
        }
        cmd.cmd = 'npm run ' + cmdName + args;
    }
    return [cmd];
}

function expandNpmWildcard(cmd, cmdName, wildcardPos, args) {
    var rePre = _.escapeRegExp(cmdName.substr(0, wildcardPos));
    var reSuf = _.escapeRegExp(cmdName.substr(wildcardPos + 1));
    var wildcardRe = new RegExp('^' + rePre + '(.*?)' + reSuf + '$');

    return pkgInfo.getScripts().filter(function (script) {
        return script.match(wildcardRe);
    }).map(function (script) {
        return Object.assign({}, cmd, {
            cmd: 'npm run ' + script + args,
            name: cmd.name + script.match(wildcardRe)[1]
        });
    });
}