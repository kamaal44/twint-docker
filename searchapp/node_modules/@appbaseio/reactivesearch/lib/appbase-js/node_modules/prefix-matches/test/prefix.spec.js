'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _prefix = require('../prefix');

var _prefix2 = _interopRequireDefault(_prefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('returns an array', function (t) {
  t.true(Array.isArray((0, _prefix2.default)('test', {})));
});

(0, _ava2.default)('returns empty array if no matches', function (t) {
  t.is((0, _prefix2.default)('w', { ignore: 'a' }).length, 0);
  t.is((0, _prefix2.default)('a.b', { ignore: 'a', actual: { ignore: 'b' } }).length, 0);
});

(0, _ava2.default)('returns correct property chain if result is object', function (t) {
  t.deepEqual((0, _prefix2.default)('t.j', {
    test: {
      js: {
        default: 'test js',
        watch: 'test watch js'
      }
    }
  }), [{
    'test.js': {
      default: 'test js',
      watch: 'test watch js'
    }
  }]);
});

(0, _ava2.default)('resolves single prefixes', function (t) {
  t.deepEqual((0, _prefix2.default)('w', { watch: 'a' }), [{ watch: 'a' }]);
  t.deepEqual((0, _prefix2.default)('w', { watch: 'a', wait: 'b' }), [{ watch: 'a' }, { wait: 'b' }]);
  t.deepEqual((0, _prefix2.default)('w', { watch: 'a', wait: 'b', ignore: 'c' }), [{ watch: 'a' }, { wait: 'b' }]);
});

(0, _ava2.default)('resolves nested prefixes', function (t) {
  t.deepEqual((0, _prefix2.default)('w.j', {
    watch: {
      js: 'watch javascript',
      css: 'watch css'
    },
    write: {
      js: 'write javascript'
    }
  }), [{
    'watch.js': 'watch javascript'
  }, {
    'write.js': 'write javascript'
  }]);
});

(0, _ava2.default)('resolves _really_ nested prefixes', function (t) {
  t.deepEqual((0, _prefix2.default)('b.f.j', {
    build: {
      frontend: {
        js: 'build javascript',
        css: 'build css'
      }
    }
  }), [{ 'build.frontend.js': 'build javascript' }]);
});

(0, _ava2.default)('does not flatten results', function (t) {
  t.deepEqual((0, _prefix2.default)('w', {
    watch: {
      js: 'watch javascript',
      css: 'watch css'
    },
    build: 'build things'
  }), [{ watch: { js: 'watch javascript', css: 'watch css' } }]);
});