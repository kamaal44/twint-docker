'use strict';

module.exports = require('./loader')(global, loadImplementation);

function loadImplementation(implementation) {
	var impl = void 0;

	if (implementation === 'global.Observable') {
		// If no implementation or env specified use global.Observable
		impl = {
			Observable: global.Observable,
			implementation: 'global.Observable'
		};
	} else if (implementation) {
		// If implementation specified, require it
		var lib = require(implementation);

		impl = {
			Observable: lib.Observable || lib.default || lib,
			implementation: implementation
		};
	} else {
		// Try to auto detect implementation. This is non-deterministic
		// and should prefer other branches, but this is our last chance
		// to load something without throwing error
		impl = tryAutoDetect();
	}

	if (!impl) {
		throw new Error('Cannot find any-observable implementation nor' + ' global.Observable. You must install polyfill or call' + ' require("any-observable/register") with your preferred' + ' implementation, e.g. require("any-observable/register")(\'rxjs\')' + ' on application load prior to any require("any-observable").');
	}

	return impl;
}

function tryAutoDetect() {
	var libs = ['rxjs', 'zen-observable'];

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = libs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var lib = _step.value;

			try {
				return loadImplementation(lib);
			} catch (_) {}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return null;
}