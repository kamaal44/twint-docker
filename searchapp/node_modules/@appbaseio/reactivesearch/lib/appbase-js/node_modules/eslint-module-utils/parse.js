"use strict";

exports.__esModule = true;

var moduleRequire = require('./module-require').default;
var extname = require('path').extname;

var log = require('debug')('eslint-plugin-import:parse');

exports.default = function parse(path, content, context) {

  if (context == null) throw new Error('need context to parse properly');

  var parserOptions = context.parserOptions;
  var parserPath = getParserPath(path, context);

  if (!parserPath) throw new Error('parserPath is required!');

  // hack: espree blows up with frozen options
  parserOptions = Object.assign({}, parserOptions);
  parserOptions.ecmaFeatures = Object.assign({}, parserOptions.ecmaFeatures);

  // always include and attach comments
  parserOptions.comment = true;
  parserOptions.attachComment = true;

  // attach node locations
  parserOptions.loc = true;

  // provide the `filePath` like eslint itself does, in `parserOptions`
  // https://github.com/eslint/eslint/blob/3ec436ee/lib/linter.js#L637
  parserOptions.filePath = path;

  // require the parser relative to the main module (i.e., ESLint)
  var parser = moduleRequire(parserPath);

  return parser.parse(content, parserOptions);
};

function getParserPath(path, context) {
  var parsers = context.settings['import/parsers'];
  if (parsers != null) {
    var extension = extname(path);
    for (var parserPath in parsers) {
      if (parsers[parserPath].indexOf(extension) > -1) {
        // use this alternate parser
        log('using alt parser:', parserPath);
        return parserPath;
      }
    }
  }
  // default to use ESLint parser
  return context.parserPath;
}