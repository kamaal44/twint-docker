"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

exports.__esModule = true;

var log = require('debug')('eslint-module-utils:ModuleCache');

var ModuleCache = function () {
  function ModuleCache(map) {
    _classCallCheck(this, ModuleCache);

    this.map = map || new Map();
  }

  /**
   * returns value for returning inline
   * @param {[type]} cacheKey [description]
   * @param {[type]} result   [description]
   */


  _createClass(ModuleCache, [{
    key: 'set',
    value: function set(cacheKey, result) {
      this.map.set(cacheKey, { result: result, lastSeen: Date.now() });
      log('setting entry for', cacheKey);
      return result;
    }
  }, {
    key: 'get',
    value: function get(cacheKey, settings) {
      if (this.map.has(cacheKey)) {
        var f = this.map.get(cacheKey);
        // check fresness
        if (Date.now() - f.lastSeen < settings.lifetime * 1000) return f.result;
      } else log('cache miss for', cacheKey);
      // cache miss
      return undefined;
    }
  }]);

  return ModuleCache;
}();

ModuleCache.getSettings = function (settings) {
  var cacheSettings = Object.assign({
    lifetime: 30 // seconds
  }, settings['import/cache']);

  // parse infinity
  if (cacheSettings.lifetime === 'âˆž' || cacheSettings.lifetime === 'Infinity') {
    cacheSettings.lifetime = Infinity;
  }

  return cacheSettings;
};

exports.default = ModuleCache;