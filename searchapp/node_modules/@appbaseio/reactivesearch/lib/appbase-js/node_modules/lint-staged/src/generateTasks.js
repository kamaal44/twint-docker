'use strict';

var path = require('path');
var micromatch = require('micromatch');
var pathIsInside = require('path-is-inside');

var _require = require('./getConfig'),
    getConfig = _require.getConfig;

var resolveGitDir = require('./resolveGitDir');

var debug = require('debug')('lint-staged:gen-tasks');

module.exports = function generateTasks(config, stagedRelFiles) {
  debug('Generating linter tasks');

  var normalizedConfig = getConfig(config); // Ensure we have a normalized config
  var linters = normalizedConfig.linters,
      globOptions = normalizedConfig.globOptions;

  var ignorePatterns = normalizedConfig.ignore.map(function (pattern) {
    return '!' + pattern;
  });

  var gitDir = resolveGitDir();
  var cwd = process.cwd();
  var stagedFiles = stagedRelFiles.map(function (file) {
    return path.resolve(gitDir, file);
  });

  return Object.keys(linters).map(function (pattern) {
    var isParentDirPattern = pattern.startsWith('../');
    var patterns = [pattern].concat(ignorePatterns);
    var commands = linters[pattern];

    var fileList = micromatch(stagedFiles
    // Only worry about children of the CWD unless the pattern explicitly
    // specifies that it concerns a parent directory.
    .filter(function (file) {
      return isParentDirPattern || pathIsInside(file, cwd);
    })
    // Make the paths relative to CWD for filtering
    .map(function (file) {
      return path.relative(cwd, file);
    }), patterns, globOptions)
    // Return absolute path after the filter is run
    .map(function (file) {
      return path.resolve(cwd, file);
    });

    var task = { pattern: pattern, commands: commands, fileList: fileList };
    debug('Generated task: \n%O', task);

    return task;
  });
};