'use strict';

var _templateObject = _taggedTemplateLiteral(['\n      `lint-staged` no longer supports running scripts defined in package.json.\n\n      The same behavior can be achieved by changing the command to any of the following:\n        - `npm run ', ' -- ', '`\n        - `', ' ', '`\n    '], ['\n      \\`lint-staged\\` no longer supports running scripts defined in package.json.\n\n      The same behavior can be achieved by changing the command to any of the following:\n        - \\`npm run ', ' -- ', '\\`\n        - \\`', ' ', '\\`\n    ']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var chalk = require('chalk');
var dedent = require('dedent');
var has = require('lodash/has');

var warn = function warn(msg) {
  console.warn(chalk.yellowBright.bold(msg));
};

/**
 * Checks if the given command or binary name is present in the package.json scripts. This would be
 * called if and when resolving a binary fails in `findBin`.
 *
 * @param {Object} pkg package.json
 * @param {string} cmd
 * @param {string} binName
 * @param {Array<string>} args
 * @throws {Error} If a script is found in the pkg for the given `cmd` or `binName`.
 */
module.exports = function checkPkgScripts(pkg, cmd, binName, args) {
  if (pkg && pkg.scripts) {
    var scripts = pkg.scripts;

    var scriptName = void 0;
    var script = void 0;
    if (has(scripts, cmd)) {
      scriptName = cmd;
      script = scripts[cmd];
    } else if (has(scripts, binName)) {
      scriptName = binName;
      script = scripts[binName];
    } else {
      return;
    }

    var argsStr = args && args.length ? args.join(' ') : '';
    warn(dedent(_templateObject, scriptName, argsStr, script, argsStr));
    throw new Error('Could not resolve binary for `' + cmd + '`');
  }
};