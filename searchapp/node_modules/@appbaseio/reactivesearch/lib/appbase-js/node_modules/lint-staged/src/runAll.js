'use strict';

var sgf = require('staged-git-files');
var Listr = require('listr');
var has = require('lodash/has');
var pify = require('pify');
var makeCmdTasks = require('./makeCmdTasks');
var generateTasks = require('./generateTasks');
var resolveGitDir = require('./resolveGitDir');

var debug = require('debug')('lint-staged:run');

/**
 * Executes all tasks and either resolves or rejects the promise
 * @param config {Object}
 * @returns {Promise}
 */
module.exports = function runAll(config) {
  debug('Running all linter scripts');
  // Config validation
  if (!config || !has(config, 'concurrent') || !has(config, 'renderer')) {
    throw new Error('Invalid config provided to runAll! Use getConfig instead.');
  }

  var concurrent = config.concurrent,
      renderer = config.renderer,
      chunkSize = config.chunkSize,
      subTaskConcurrency = config.subTaskConcurrency;

  var gitDir = resolveGitDir();
  debug('Resolved git directory to be `%s`', gitDir);

  sgf.cwd = gitDir;
  return pify(sgf)('ACM').then(function (files) {
    /* files is an Object{ filename: String, status: String } */
    var filenames = files.map(function (file) {
      return file.filename;
    });
    debug('Loaded list of staged files in git:\n%O', filenames);

    var tasks = generateTasks(config, filenames).map(function (_task) {
      return {
        title: 'Running tasks for ' + _task.pattern,
        task: function task() {
          return new Listr(makeCmdTasks(_task.commands, _task.fileList, {
            chunkSize: chunkSize,
            subTaskConcurrency: subTaskConcurrency
          }), {
            // In sub-tasks we don't want to run concurrently
            // and we want to abort on errors
            dateFormat: false,
            concurrent: false,
            exitOnError: true
          });
        },
        skip: function skip() {
          if (_task.fileList.length === 0) {
            return 'No staged files match ' + _task.pattern;
          }
          return false;
        }
      };
    });

    if (tasks.length) {
      return new Listr(tasks, {
        dateFormat: false,
        concurrent: concurrent,
        renderer: renderer,
        exitOnError: !concurrent // Wait for all errors when running concurrently
      }).run();
    }
    return 'No tasks to run.';
  });
};