/* eslint no-prototype-builtins: 0 */

'use strict';

var chalk = require('chalk');
var format = require('stringify-object');
var intersection = require('lodash/intersection');
var defaultsDeep = require('lodash/defaultsDeep');
var isObject = require('lodash/isObject');

var _require = require('jest-validate'),
    validate = _require.validate,
    logValidationWarning = _require.logValidationWarning;

var _require2 = require('jest-validate/build/warnings'),
    unknownOptionWarning = _require2.unknownOptionWarning;

var isGlob = require('is-glob');

var debug = require('debug')('lint-staged:cfg');

/**
 * Default config object
 *
 * @type {{concurrent: boolean, chunkSize: number, globOptions: {matchBase: boolean, dot: boolean}, linters: {}, subTaskConcurrency: number, renderer: string}}
 */
var defaultConfig = {
  concurrent: true,
  chunkSize: Number.MAX_SAFE_INTEGER,
  globOptions: {
    matchBase: true,
    dot: true
  },
  linters: {},
  ignore: [],
  subTaskConcurrency: 1,
  renderer: 'update'

  /**
   * Check if the config is "simple" i.e. doesn't contains any of full config keys
   *
   * @param config
   * @returns {boolean}
   */
};function isSimple(config) {
  return isObject(config) && !config.hasOwnProperty('linters') && intersection(Object.keys(defaultConfig), Object.keys(config)).length === 0;
}

/**
 * Custom jest-validate reporter for unknown options
 * @param config
 * @param example
 * @param option
 * @param options
 * @returns {void}
 */
function unknownValidationReporter(config, example, option, options) {
  /**
   * If the unkonwn property is a glob this is probably
   * a typical mistake of mixing simple and advanced configs
   */
  if (isGlob(option)) {
    // prettier-ignore
    var message = '  Unknown option ' + chalk.bold('"' + option + '"') + ' with value ' + chalk.bold(format(config[option], { inlineCharacterLimit: Number.POSITIVE_INFINITY })) + ' was found in the config root.\n\n  You are probably trying to mix simple and advanced config formats. Adding\n\n  ' + chalk.bold('"linters": {\n    "' + option + '": ' + JSON.stringify(config[option]) + '\n  }') + '\n\n  will fix it and remove this message.';

    var comment = options.comment;

    var name = options.title.warning;
    return logValidationWarning(name, message, comment);
  }
  // If it is not glob pattern, use default jest-validate reporter
  return unknownOptionWarning(config, example, option, options);
}

/**
 * For a given configuration object that we retrive from .lintstagedrc or package.json
 * construct a full configuration with all options set.
 *
 * This is a bit tricky since we support 2 different syntxes: simple and full
 * For simple config, only the `linters` configuration is provided.
 *
 * @param {Object} sourceConfig
 * @returns {{
 *  concurrent: boolean, chunkSize: number, globOptions: {matchBase: boolean, dot: boolean}, linters: {}, subTaskConcurrency: number, renderer: string
 * }}
 */
function getConfig(sourceConfig, debugMode) {
  debug('Normalizing config');
  var config = defaultsDeep({}, // Do not mutate sourceConfig!!!
  isSimple(sourceConfig) ? { linters: sourceConfig } : sourceConfig, defaultConfig);

  // Check if renderer is set in sourceConfig and if not, set accordingly to verbose
  if (isObject(sourceConfig) && !sourceConfig.hasOwnProperty('renderer')) {
    config.renderer = debugMode ? 'verbose' : 'update';
  }

  return config;
}

var optRmMsg = function optRmMsg(opt, helpMsg) {
  return '  Option ' + chalk.bold(opt) + ' was removed.\n\n  ' + helpMsg + '\n\n  Please remove ' + chalk.bold(opt) + ' from your configuration.';
};

/**
 * Runs config validation. Throws error if the config is not valid.
 * @param config {Object}
 * @returns config {Object}
 */
function validateConfig(config) {
  debug('Validating config');
  var exampleConfig = Object.assign({}, defaultConfig, {
    linters: {
      '*.js': ['eslint --fix', 'git add'],
      '*.css': 'stylelint'
    }
  });

  var deprecatedConfig = {
    gitDir: function gitDir() {
      return optRmMsg('gitDir', "lint-staged now automatically resolves '.git' directory.");
    },
    verbose: function verbose() {
      return optRmMsg('verbose', 'Use the command line flag ' + chalk.bold('--debug') + ' instead.');
    }
  };

  validate(config, {
    exampleConfig: exampleConfig,
    deprecatedConfig: deprecatedConfig,
    unknown: unknownValidationReporter,
    recursive: false,
    comment: 'Please refer to https://github.com/okonet/lint-staged#configuration for more information...'
  });

  return config;
}

module.exports = {
  getConfig: getConfig,
  validateConfig: validateConfig
};