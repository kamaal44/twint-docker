'use strict';

exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _MicImage = require('../../../styles/MicImage');

var _MicImage2 = _interopRequireDefault(_MicImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var STATUS = {
	initial: 'INITIAL',
	started: 'STARTED',
	allowed: 'ALLOWED',
	deined: 'DENIED'
};

var Mic = function (_React$Component) {
	_inherits(Mic, _React$Component);

	function Mic() {
		_classCallCheck(this, Mic);

		var _this = _possibleConstructorReturn(this, _React$Component.call(this));

		_this.handleClick = function () {
			_this.results = [];
			if (window.SpeechRecognition) {
				var status = _this.state.status;

				if (status === STATUS.initial) {
					_this.setState({
						status: STATUS.started
					});
				}
				var _this$props = _this.props,
				    onResult = _this$props.onResult,
				    onNoMatch = _this$props.onNoMatch,
				    onError = _this$props.onError,
				    lang = _this$props.lang,
				    getInstance = _this$props.getInstance;
				var _window = window,
				    SpeechRecognition = _window.SpeechRecognition;

				if (_this.instance) {
					_this.setState({
						status: STATUS.initial
					}, function () {
						_this.instance.stop();
						_this.instance = null;
					});
					return;
				}
				_this.instance = new SpeechRecognition();
				_this.instance.continuous = true;
				_this.instance.interimResults = true;
				_this.instance.lang = lang;
				if (getInstance) {
					getInstance(_this.instance);
				}
				_this.instance.start();
				_this.instance.onstart = function () {
					_this.setState({
						status: STATUS.allowed
					});
				};
				_this.instance.onresult = function (_ref) {
					var results = _ref.results,
					    timeStamp = _ref.timeStamp;

					_this.setState({
						status: STATUS.initial
					});
					if (onResult) {
						onResult({ results: results, timeStamp: timeStamp });
					}
					_this.results.push({ results: results, timeStamp: timeStamp });
				};
				_this.instance.onnomatch = function (e) {
					return onNoMatch ? onNoMatch(e) : console.warn(e);
				};
				_this.instance.onerror = function (e) {
					if (e.error === 'no-speech' || e.error === 'audio-capture') {
						_this.setState({
							status: STATUS.initial
						});
					} else if (e.error === 'not-allowed') {
						_this.setState({
							status: STATUS.deined
						});
					}
					console.error(e);
					if (onError) {
						onError(e);
					}
				};

				/* Below Two methods run when Continuous is False */
				_this.instance.onspeechend = function () {
					_this.setState({
						status: STATUS.initial
					});
				};

				_this.instance.onaudioend = function () {
					_this.setState({
						status: STATUS.initial
					});
				};
			}
		};

		_this.state = {
			status: STATUS.initial
		};
		window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition || null;
		_this.results = [];
		return _this;
	}

	Mic.prototype.render = function render() {
		var iconPosition = this.props.iconPosition;

		return _react2.default.createElement(_MicImage2.default, {
			iconPosition: iconPosition,
			onClick: this.handleClick,
			alt: 'voice search',
			src: this.Image
		});
	};

	_createClass(Mic, [{
		key: 'Image',
		get: function get() {
			var status = this.state.status;

			switch (status) {
				case STATUS.allowed:
					return 'https://raw.githubusercontent.com/googlearchive/webplatform-samples/master/webspeechdemo/mic-animate.gif';
				case STATUS.started:
				case STATUS.deined:
					return 'https://raw.githubusercontent.com/googlearchive/webplatform-samples/master/webspeechdemo/mic-slash.gif';
				default:
					return 'https://raw.githubusercontent.com/googlearchive/webplatform-samples/master/webspeechdemo/mic.gif';
			}
		}
	}]);

	return Mic;
}(_react2.default.Component);

Mic.defaultProps = {
	lang: 'en-US',
	iconPosition: 'left'
};

Mic.propTypes = {
	children: _types2.default.title,
	lang: _types2.default.string,
	iconPosition: _types2.default.string,
	onResult: _types2.default.func,
	onNoMatch: _types2.default.func,
	onError: _types2.default.func,
	getInstance: _types2.default.func
};

exports.default = Mic;